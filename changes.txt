diff --git a/lib/constant/constants.dart b/lib/constant/constants.dart
index da82d51..f1ba127 100755
--- a/lib/constant/constants.dart
+++ b/lib/constant/constants.dart
@@ -16,13 +16,14 @@ bool forceSentry =
 
 
 bool forceUserLogin = debugMode;
-String testUserLogin = "doctor@infycare.com";
-String testUserPassword = "123456";
+String testUserLogin = "haus@haus.ru";
+String testUserPassword = "123123123";
 
-const String kApiDomain = 'https://onlinedoctor.su';
+const String kApiDomain = 'https://admin.onlinedoctor.su';
 //https://graph.free-dharma.ru/public';
 
 MyAppAuthLib graphqlAPI = MyAppAuthLib(kApiDomain);
+MyAppAuthLib graphqlAPI2 = MyAppAuthLib(kApiDomain);
 
 bool printedLog = true;
 bool printedResult = true;
diff --git a/lib/daily/app_message.freezed.dart b/lib/daily/app_message.freezed.dart
old mode 100755
new mode 100644
index 438753a..9bde5b2
--- a/lib/daily/app_message.freezed.dart
+++ b/lib/daily/app_message.freezed.dart
@@ -66,6 +66,8 @@ mixin _$AppMessage {
     required TResult orElse(),
   }) =>
       throw _privateConstructorUsedError;
+
+  /// Serializes this AppMessage to a JSON map.
   Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
 }
 
@@ -85,6 +87,9 @@ class _$AppMessageCopyWithImpl<$Res, $Val extends AppMessage>
   final $Val _value;
   // ignore: unused_field
   final $Res Function($Val) _then;
+
+  /// Create a copy of AppMessage
+  /// with the given fields replaced by the non-null parameter values.
 }
 
 /// @nodoc
@@ -109,6 +114,8 @@ class __$$MessageImplCopyWithImpl<$Res>
       _$MessageImpl _value, $Res Function(_$MessageImpl) _then)
       : super(_value, _then);
 
+  /// Create a copy of AppMessage
+  /// with the given fields replaced by the non-null parameter values.
   @pragma('vm:prefer-inline')
   @override
   $Res call({
@@ -132,6 +139,8 @@ class __$$MessageImplCopyWithImpl<$Res>
     ));
   }
 
+  /// Create a copy of AppMessage
+  /// with the given fields replaced by the non-null parameter values.
   @override
   @pragma('vm:prefer-inline')
   $ParticipantIdCopyWith<$Res> get fromParticipantId {
@@ -183,12 +192,14 @@ class _$MessageImpl implements Message {
             const DeepCollectionEquality().equals(other._data, _data));
   }
 
-  @JsonKey(ignore: true)
+  @JsonKey(includeFromJson: false, includeToJson: false)
   @override
   int get hashCode => Object.hash(runtimeType, event, fromParticipantId,
       const DeepCollectionEquality().hash(_data));
 
-  @JsonKey(ignore: true)
+  /// Create a copy of AppMessage
+  /// with the given fields replaced by the non-null parameter values.
+  @JsonKey(includeFromJson: false, includeToJson: false)
   @override
   @pragma('vm:prefer-inline')
   _$$MessageImplCopyWith<_$MessageImpl> get copyWith =>
@@ -285,7 +296,10 @@ abstract class Message implements AppMessage {
   String get event;
   ParticipantId get fromParticipantId;
   Map<String, dynamic> get data;
-  @JsonKey(ignore: true)
+
+  /// Create a copy of AppMessage
+  /// with the given fields replaced by the non-null parameter values.
+  @JsonKey(includeFromJson: false, includeToJson: false)
   _$$MessageImplCopyWith<_$MessageImpl> get copyWith =>
       throw _privateConstructorUsedError;
 }
@@ -309,6 +323,8 @@ class __$$ChatMessageImplCopyWithImpl<$Res>
       _$ChatMessageImpl _value, $Res Function(_$ChatMessageImpl) _then)
       : super(_value, _then);
 
+  /// Create a copy of AppMessage
+  /// with the given fields replaced by the non-null parameter values.
   @pragma('vm:prefer-inline')
   @override
   $Res call({
@@ -322,6 +338,8 @@ class __$$ChatMessageImplCopyWithImpl<$Res>
     ));
   }
 
+  /// Create a copy of AppMessage
+  /// with the given fields replaced by the non-null parameter values.
   @override
   @pragma('vm:prefer-inline')
   $ChatMessageCopyWith<$Res> get message {
@@ -356,11 +374,13 @@ class _$ChatMessageImpl implements _ChatMessage {
             (identical(other.message, message) || other.message == message));
   }
 
-  @JsonKey(ignore: true)
+  @JsonKey(includeFromJson: false, includeToJson: false)
   @override
   int get hashCode => Object.hash(runtimeType, message);
 
-  @JsonKey(ignore: true)
+  /// Create a copy of AppMessage
+  /// with the given fields replaced by the non-null parameter values.
+  @JsonKey(includeFromJson: false, includeToJson: false)
   @override
   @pragma('vm:prefer-inline')
   _$$ChatMessageImplCopyWith<_$ChatMessageImpl> get copyWith =>
@@ -453,7 +473,10 @@ abstract class _ChatMessage implements AppMessage {
       _$ChatMessageImpl;
 
   ChatMessage get message;
-  @JsonKey(ignore: true)
+
+  /// Create a copy of AppMessage
+  /// with the given fields replaced by the non-null parameter values.
+  @JsonKey(includeFromJson: false, includeToJson: false)
   _$$ChatMessageImplCopyWith<_$ChatMessageImpl> get copyWith =>
       throw _privateConstructorUsedError;
 }
@@ -477,6 +500,8 @@ class __$$ChatMessageReactionImplCopyWithImpl<$Res>
       $Res Function(_$ChatMessageReactionImpl) _then)
       : super(_value, _then);
 
+  /// Create a copy of AppMessage
+  /// with the given fields replaced by the non-null parameter values.
   @pragma('vm:prefer-inline')
   @override
   $Res call({
@@ -490,6 +515,8 @@ class __$$ChatMessageReactionImplCopyWithImpl<$Res>
     ));
   }
 
+  /// Create a copy of AppMessage
+  /// with the given fields replaced by the non-null parameter values.
   @override
   @pragma('vm:prefer-inline')
   $ChatMessageReactionCopyWith<$Res> get reaction {
@@ -525,11 +552,13 @@ class _$ChatMessageReactionImpl implements _ChatMessageReaction {
                 other.reaction == reaction));
   }
 
-  @JsonKey(ignore: true)
+  @JsonKey(includeFromJson: false, includeToJson: false)
   @override
   int get hashCode => Object.hash(runtimeType, reaction);
 
-  @JsonKey(ignore: true)
+  /// Create a copy of AppMessage
+  /// with the given fields replaced by the non-null parameter values.
+  @JsonKey(includeFromJson: false, includeToJson: false)
   @override
   @pragma('vm:prefer-inline')
   _$$ChatMessageReactionImplCopyWith<_$ChatMessageReactionImpl> get copyWith =>
@@ -624,7 +653,10 @@ abstract class _ChatMessageReaction implements AppMessage {
       _$ChatMessageReactionImpl;
 
   ChatMessageReaction get reaction;
-  @JsonKey(ignore: true)
+
+  /// Create a copy of AppMessage
+  /// with the given fields replaced by the non-null parameter values.
+  @JsonKey(includeFromJson: false, includeToJson: false)
   _$$ChatMessageReactionImplCopyWith<_$ChatMessageReactionImpl> get copyWith =>
       throw _privateConstructorUsedError;
 }
diff --git a/lib/daily/app_message.g.dart b/lib/daily/app_message.g.dart
old mode 100755
new mode 100644
diff --git a/lib/daily/chat_message.freezed.dart b/lib/daily/chat_message.freezed.dart
old mode 100755
new mode 100644
index 545670e..d853ff4
--- a/lib/daily/chat_message.freezed.dart
+++ b/lib/daily/chat_message.freezed.dart
@@ -32,8 +32,12 @@ mixin _$ChatMessageReaction {
   String get reaction => throw _privateConstructorUsedError;
   String get skinTone => throw _privateConstructorUsedError;
 
+  /// Serializes this ChatMessageReaction to a JSON map.
   Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
-  @JsonKey(ignore: true)
+
+  /// Create a copy of ChatMessageReaction
+  /// with the given fields replaced by the non-null parameter values.
+  @JsonKey(includeFromJson: false, includeToJson: false)
   $ChatMessageReactionCopyWith<ChatMessageReaction> get copyWith =>
       throw _privateConstructorUsedError;
 }
@@ -59,6 +63,8 @@ class _$ChatMessageReactionCopyWithImpl<$Res, $Val extends ChatMessageReaction>
   // ignore: unused_field
   final $Res Function($Val) _then;
 
+  /// Create a copy of ChatMessageReaction
+  /// with the given fields replaced by the non-null parameter values.
   @pragma('vm:prefer-inline')
   @override
   $Res call({
@@ -87,6 +93,8 @@ class _$ChatMessageReactionCopyWithImpl<$Res, $Val extends ChatMessageReaction>
     ) as $Val);
   }
 
+  /// Create a copy of ChatMessageReaction
+  /// with the given fields replaced by the non-null parameter values.
   @override
   @pragma('vm:prefer-inline')
   $ChatMessageCopyWith<$Res> get message {
@@ -118,6 +126,8 @@ class __$$ChatMessageReactionImplCopyWithImpl<$Res>
       $Res Function(_$ChatMessageReactionImpl) _then)
       : super(_value, _then);
 
+  /// Create a copy of ChatMessageReaction
+  /// with the given fields replaced by the non-null parameter values.
   @pragma('vm:prefer-inline')
   @override
   $Res call({
@@ -194,12 +204,14 @@ class _$ChatMessageReactionImpl implements _ChatMessageReaction {
                 other.skinTone == skinTone));
   }
 
-  @JsonKey(ignore: true)
+  @JsonKey(includeFromJson: false, includeToJson: false)
   @override
   int get hashCode =>
       Object.hash(runtimeType, seen, message, reaction, skinTone);
 
-  @JsonKey(ignore: true)
+  /// Create a copy of ChatMessageReaction
+  /// with the given fields replaced by the non-null parameter values.
+  @JsonKey(includeFromJson: false, includeToJson: false)
   @override
   @pragma('vm:prefer-inline')
   _$$ChatMessageReactionImplCopyWith<_$ChatMessageReactionImpl> get copyWith =>
@@ -226,21 +238,24 @@ abstract class _ChatMessageReaction implements ChatMessageReaction {
 
   @override
   bool get seen;
-  @override
 
   /// The chat message as it looked BEFORE the reaction was added or removed.
   ///
   /// Ie. if the message's reaction map entry for [reaction] contains [fromParticipantId], then that was the state
   /// before this action happened and the user clicked to REMOVE [reaction].
-  ChatMessage get message;
   @override
+  ChatMessage get message;
 
   /// The reaction
+  @override
   String get reaction;
   @override
   String get skinTone;
+
+  /// Create a copy of ChatMessageReaction
+  /// with the given fields replaced by the non-null parameter values.
   @override
-  @JsonKey(ignore: true)
+  @JsonKey(includeFromJson: false, includeToJson: false)
   _$$ChatMessageReactionImplCopyWith<_$ChatMessageReactionImpl> get copyWith =>
       throw _privateConstructorUsedError;
 }
@@ -264,8 +279,12 @@ mixin _$ChatMessage {
   Map<String, Set<ParticipantId>> get reactions =>
       throw _privateConstructorUsedError;
 
+  /// Serializes this ChatMessage to a JSON map.
   Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
-  @JsonKey(ignore: true)
+
+  /// Create a copy of ChatMessage
+  /// with the given fields replaced by the non-null parameter values.
+  @JsonKey(includeFromJson: false, includeToJson: false)
   $ChatMessageCopyWith<ChatMessage> get copyWith =>
       throw _privateConstructorUsedError;
 }
@@ -300,6 +319,8 @@ class _$ChatMessageCopyWithImpl<$Res, $Val extends ChatMessage>
   // ignore: unused_field
   final $Res Function($Val) _then;
 
+  /// Create a copy of ChatMessage
+  /// with the given fields replaced by the non-null parameter values.
   @pragma('vm:prefer-inline')
   @override
   $Res call({
@@ -348,6 +369,8 @@ class _$ChatMessageCopyWithImpl<$Res, $Val extends ChatMessage>
     ) as $Val);
   }
 
+  /// Create a copy of ChatMessage
+  /// with the given fields replaced by the non-null parameter values.
   @override
   @pragma('vm:prefer-inline')
   $ParticipantIdCopyWith<$Res>? get fromParticipantId {
@@ -392,6 +415,8 @@ class __$$ChatMessageImplCopyWithImpl<$Res>
       _$ChatMessageImpl _value, $Res Function(_$ChatMessageImpl) _then)
       : super(_value, _then);
 
+  /// Create a copy of ChatMessage
+  /// with the given fields replaced by the non-null parameter values.
   @pragma('vm:prefer-inline')
   @override
   $Res call({
@@ -510,7 +535,7 @@ class _$ChatMessageImpl extends _ChatMessage {
                 .equals(other._reactions, _reactions));
   }
 
-  @JsonKey(ignore: true)
+  @JsonKey(includeFromJson: false, includeToJson: false)
   @override
   int get hashCode => Object.hash(
       runtimeType,
@@ -523,7 +548,9 @@ class _$ChatMessageImpl extends _ChatMessage {
       local,
       const DeepCollectionEquality().hash(_reactions));
 
-  @JsonKey(ignore: true)
+  /// Create a copy of ChatMessage
+  /// with the given fields replaced by the non-null parameter values.
+  @JsonKey(includeFromJson: false, includeToJson: false)
   @override
   @pragma('vm:prefer-inline')
   _$$ChatMessageImplCopyWith<_$ChatMessageImpl> get copyWith =>
@@ -572,8 +599,11 @@ abstract class _ChatMessage extends ChatMessage {
   @override
   @JsonKey(fromJson: reactionsFromJson, ignore: true)
   Map<String, Set<ParticipantId>> get reactions;
+
+  /// Create a copy of ChatMessage
+  /// with the given fields replaced by the non-null parameter values.
   @override
-  @JsonKey(ignore: true)
+  @JsonKey(includeFromJson: false, includeToJson: false)
   _$$ChatMessageImplCopyWith<_$ChatMessageImpl> get copyWith =>
       throw _privateConstructorUsedError;
 }
diff --git a/lib/daily/chat_message.g.dart b/lib/daily/chat_message.g.dart
old mode 100755
new mode 100644
diff --git a/lib/extensions.dart b/lib/extensions.dart
index 21bc116..859c217 100755
--- a/lib/extensions.dart
+++ b/lib/extensions.dart
@@ -5,6 +5,7 @@ import 'package:doctorq/models/user_model.dart';
 import 'package:doctorq/stores/appointments_store.dart';
 import 'package:doctorq/stores/doctor_sessions_store.dart';
 import 'package:doctorq/stores/doctors_store.dart';
+import 'package:doctorq/stores/patients_store.dart';
 import 'package:doctorq/stores/user_store.dart';
 
 import 'package:doctorq/stores/specs_store.dart';
@@ -22,6 +23,7 @@ extension BuildContextExt on BuildContext {
       getIt.get<AppointmentsStore>();
   static DoctorSessionsStore storeDoctorSessionsStore =
       getIt.get<DoctorSessionsStore>();
+  static PatientsStore storePatientsStore = getIt.get<PatientsStore>();
 
   // All about user
   Map<dynamic, dynamic> get userData {
@@ -50,6 +52,22 @@ extension BuildContextExt on BuildContext {
     return storeDoctorsStore.selectedDoctor;
   }
 
+  // All about patients
+  List get patientsData {
+    return storePatientsStore.patientsDataList;
+  }
+
+  void setSelectedPatientByIndex(int index) {
+    print('setSelectedPatientByIndex');
+    print(storePatientsStore.patientsDataList[index]);
+    storePatientsStore
+        .setSelectedPatient(storePatientsStore.patientsDataList[index]);
+  }
+
+  Map<dynamic, dynamic> get selectedPatient {
+    return storePatientsStore.selectedPatient;
+  }
+
   // All about appointments
   List<Map<dynamic, dynamic>> get appointmentsData {
     return storeAppointmentsStore.appointmentsDataList;
@@ -82,4 +100,26 @@ extension BuildContextExt on BuildContext {
     storeUserStore.setUserData(userModel.toJson());
 //        .addDoctorSessionToDoctorSessionsData(sessionModel.toJson());
   }
+
+  // Calculate duration between two time strings in format "HH:MM"
+  int calculateDuration(String? fromTime, String? toTime) {
+    if (fromTime == null || toTime == null) return 45;
+    
+    try {
+      final fromParts = fromTime.split(':');
+      final toParts = toTime.split(':');
+      
+      final fromHour = int.parse(fromParts[0]);
+      final fromMinute = int.parse(fromParts[1]);
+      final toHour = int.parse(toParts[0]);
+      final toMinute = int.parse(toParts[1]);
+      
+      final fromTotalMinutes = fromHour * 60 + fromMinute;
+      final toTotalMinutes = toHour * 60 + toMinute;
+      
+      return toTotalMinutes - fromTotalMinutes;
+    } catch (e) {
+      return 45; // Default duration if parsing fails
+    }
+  }
 }
diff --git a/lib/main.dart b/lib/main.dart
index 33ed66b..47855a2 100755
--- a/lib/main.dart
+++ b/lib/main.dart
@@ -23,6 +23,7 @@ import 'theme/theme_constants.dart';
 import 'theme/theme_manager.dart';
 import 'package:doctorq/screens/main_screen.dart';
 import 'package:another_flutter_splash_screen/another_flutter_splash_screen.dart';
+import 'package:loader_overlay/loader_overlay.dart';
 
 import 'package:flutter_screenutil/flutter_screenutil.dart';
 
@@ -160,7 +161,7 @@ class _MyAppState extends State<MyApp> with WidgetsBindingObserver {
     return ScreenUtilInit(
       designSize: const Size(360, 800),
       builder: (context, child) {
-        return MaterialApp(
+        return GlobalLoaderOverlay(child: MaterialApp(
           theme: ThemeData(
             scaffoldBackgroundColor: Colors.white,
             colorScheme: ColorScheme.fromSeed(
@@ -200,7 +201,7 @@ class _MyAppState extends State<MyApp> with WidgetsBindingObserver {
               ),
             ),
           ),
-        );
+        ));
       },
     );
   }
diff --git a/lib/screens/appointments/upcoming_appointments/widgets/listreply1_item_widget.dart b/lib/screens/appointments/upcoming_appointments/widgets/listreply1_item_widget.dart
index e9aaa94..240e300 100755
--- a/lib/screens/appointments/upcoming_appointments/widgets/listreply1_item_widget.dart
+++ b/lib/screens/appointments/upcoming_appointments/widgets/listreply1_item_widget.dart
@@ -114,6 +114,9 @@ class AppointmentListItem extends StatelessWidget {
 
   void navigateToScreenWithTypes(BuildContext context,bool isPast) async {
     print("Navigating...");
+    context.setSelectedAppointmentByIndex(index);
+    print(item['id']);
+    print(context.selectedAppointment);
 
     try {
       // Check if item exists
diff --git a/lib/screens/audio_resolution.dart b/lib/screens/audio_resolution.dart
index 7a69a4e..6b96f69 100644
--- a/lib/screens/audio_resolution.dart
+++ b/lib/screens/audio_resolution.dart
@@ -2,6 +2,7 @@ import 'dart:ui';
 import 'package:doctorq/screens/appointments/book_screen/book_screen.dart';
 import 'package:flutter/material.dart';
 import 'package:doctorq/widgets/custom_button.dart';
+import 'package:doctorq/extensions.dart';
 
 class AudioResolution extends StatefulWidget {
   const AudioResolution({Key? key}) : super(key: key);
@@ -68,7 +69,9 @@ class _AudioResolutionState extends State<AudioResolution> {
                         children: [
                           CircleAvatar(
                             radius: 30,
-                            backgroundImage: const AssetImage('assets/images/11.png'),
+                            backgroundImage: context.selectedAppointment['patient']?['profile_image'] != null
+                                ? NetworkImage(context.selectedAppointment['patient']?['profile_image'])
+                                : AssetImage('assets/images/11.png') as ImageProvider,
                           ),
                           const SizedBox(width: 12),
                           // Информация о враче
@@ -76,19 +79,19 @@ class _AudioResolutionState extends State<AudioResolution> {
                             child: Column(
                               crossAxisAlignment: CrossAxisAlignment.start,
                               children: [
-                                const Text(
-                                  'Парфенова К.С.',
+                                Text(
+                                  '${context.selectedAppointment['patient']?['first_name'] ?? ''} ${context.selectedAppointment['patient']?['last_name'] ?? ''}',
                                   style: TextStyle(
                                     fontSize: 14,
                                     fontWeight: FontWeight.bold,
                                   ),
                                 ),
-                                const Text(
-                                  'Женщина, 71',
+                                /* Text(
+                                  '${context.selectedAppointment['patient']?['gender'] ?? 'Не указан'}, ${context.selectedAppointment['patient']?['age'] ?? 'Не указан'}',
                                   style: TextStyle(
                                     fontSize: 12,
                                   ),
-                                ),
+                                ), */
                                 const SizedBox(height: 4),
                                 const Text(
                                   '10:00 - 10:45',
diff --git a/lib/screens/auth/forgot/password_otp_active_screen/password_otp_active_screen.dart b/lib/screens/auth/forgot/password_otp_active_screen/password_otp_active_screen.dart
index 7898f9b..01578ae 100755
--- a/lib/screens/auth/forgot/password_otp_active_screen/password_otp_active_screen.dart
+++ b/lib/screens/auth/forgot/password_otp_active_screen/password_otp_active_screen.dart
@@ -15,7 +15,8 @@ import 'package:doctorq/services/auth_service.dart';
 
 class ForgotPasswordOtpActiveScreen extends StatelessWidget {
   final dynamic response;
-  ForgotPasswordOtpActiveScreen({Key? key, this.response}) : super(key: key);
+  final dynamic password;
+  ForgotPasswordOtpActiveScreen({Key? key, this.response, this.password}) : super(key: key);
 
   @override
   Widget build(BuildContext context) {
@@ -109,8 +110,10 @@ class ForgotPasswordOtpActiveScreen extends StatelessWidget {
                           print(value.length.toString());
                           if (value.length == 4) {
                             if (value == response['code']) {
-                              var authRes =
-                                  await authUser(context, response['email'], "123456");
+                             var authRes =
+//                                  await authUser(context, "s@s.ru", "123456");
+                                  await authUser(
+                                      context, response['email'], password);
                               if (authRes == true) {
                                 Navigator.push(
                                   context,
diff --git a/lib/screens/auth/sign_in_blank_screen/sign_in_blank_screen.dart b/lib/screens/auth/sign_in_blank_screen/sign_in_blank_screen.dart
index ac4cc63..96dbe69 100755
--- a/lib/screens/auth/sign_in_blank_screen/sign_in_blank_screen.dart
+++ b/lib/screens/auth/sign_in_blank_screen/sign_in_blank_screen.dart
@@ -114,7 +114,7 @@ class _SignInBlankScreenState extends State<SignInBlankScreen> {
             ));
       },
     );
-    var authRes = await authUser(context, "f@a.ru", "123456");
+    var authRes = await authUser(context, "haus@haus.ru", "123123123");
     if (authRes == true) {
       gogo(false);
     }
diff --git a/lib/screens/auth/sign_up_blank_screen/fields.dart b/lib/screens/auth/sign_up_blank_screen/fields.dart
index c696462..3971c92 100644
--- a/lib/screens/auth/sign_up_blank_screen/fields.dart
+++ b/lib/screens/auth/sign_up_blank_screen/fields.dart
@@ -1,4 +1,5 @@
 import 'package:flutter/material.dart';
+import 'package:shared_preferences/shared_preferences.dart';
 
 class RegFields {
   static getAll() {
@@ -87,4 +88,15 @@ class RegFields {
     //return 'ploho';
     return null;
   }
+    static Future<void> saveFields() async {
+    final prefs = await SharedPreferences.getInstance();
+    
+    for (var entry in _fields.entries) {
+      final key = entry.key;
+      final field = entry.value;
+      final controller = field['controller'] as TextEditingController;
+      
+      await prefs.setString('reg_$key', controller.text);
+    }
+  }
 }
diff --git a/lib/screens/auth/sign_up_blank_screen/sign_up_blank_screen.dart b/lib/screens/auth/sign_up_blank_screen/sign_up_blank_screen.dart
index 7b349b9..2c1e912 100755
--- a/lib/screens/auth/sign_up_blank_screen/sign_up_blank_screen.dart
+++ b/lib/screens/auth/sign_up_blank_screen/sign_up_blank_screen.dart
@@ -1,5 +1,6 @@
 import 'package:doctorq/app_export.dart';
 import 'package:doctorq/screens/auth/forgot/password_otp_active_screen/password_otp_active_screen.dart';
+import 'package:doctorq/screens/auth/sign_up_blank_screen/password_dialog.dart';
 import 'package:doctorq/screens/profile/blank_screen/blank_screen.dart';
 import 'package:doctorq/screens/auth/sign_in_blank_screen/doctor_screen.dart';
 import 'package:doctorq/screens/auth/sign_in_blank_screen/sign_in_blank_screen.dart';
@@ -239,8 +240,21 @@ class _SignUpBlankScreenState extends State<SignUpBlankScreen> {
 
                       return null;
                     }
+                             final password = await showDialog<String>(
+                      context: context,
+                      builder: (context) => PasswordDialog(
+                        email: emailController.text,
+                        phone: phoneController.text,
+                        onPasswordEntered: (password) => Navigator.pop(context, password),
+                      ),
+                    );
+
+                    if (password == null) return null;
+                          MyOverlay.show(context);
+                    await RegFields.saveFields();
+
                       var regRes = await regUser(context, emailController.text,
-                        '123456', "doctor", 
+                          password, "doctor", 
                          RegFields.getAll()['full_name']['controller'].text,
                         "");
                     if (regRes) {
@@ -263,8 +277,8 @@ class _SignUpBlankScreenState extends State<SignUpBlankScreen> {
                             Navigator.of(context).push(//AndRemoveUntil(
                                 MaterialPageRoute(
                                     builder: (context) =>
-                                        ForgotPasswordOtpActiveScreen(
-                                            response: emailRes)
+                                          ForgotPasswordOtpActiveScreen(
+                                            response: emailRes,password:password)
                                     //const ProfileBlankScreen()
                                     ));
                             //(Route<dynamic> route) => false);
diff --git a/lib/screens/chat_resolution.dart b/lib/screens/chat_resolution.dart
index 3cad581..0901ed4 100644
--- a/lib/screens/chat_resolution.dart
+++ b/lib/screens/chat_resolution.dart
@@ -2,6 +2,7 @@ import 'dart:ui';
 import 'package:doctorq/screens/appointments/book_screen/book_screen.dart';
 import 'package:flutter/material.dart';
 import 'package:doctorq/widgets/custom_button.dart';
+import 'package:doctorq/extensions.dart';
 
 class ChatResolution extends StatefulWidget {
   const ChatResolution({Key? key}) : super(key: key);
@@ -67,8 +68,9 @@ class _ChatResolutionState extends State<ChatResolution> {
                         children: [
                           CircleAvatar(
                             radius: 30,
-                            backgroundImage:
-                                const AssetImage('assets/images/11.png'),
+                            backgroundImage: context.selectedAppointment['patient']?['profile_image'] != null
+                                ? NetworkImage(context.selectedAppointment['patient']?['profile_image'])
+                                : AssetImage('assets/images/11.png') as ImageProvider,
                           ),
                           const SizedBox(width: 12),
                           // Информация о враче
@@ -76,19 +78,19 @@ class _ChatResolutionState extends State<ChatResolution> {
                             child: Column(
                               crossAxisAlignment: CrossAxisAlignment.start,
                               children: [
-                                const Text(
-                                  'Парфенова К.С.',
+                                Text(
+                                  '${context.selectedAppointment['patient']?['first_name'] ?? ''} ${context.selectedAppointment['patient']?['last_name'] ?? ''}',
                                   style: TextStyle(
                                     fontSize: 14,
                                     fontWeight: FontWeight.bold,
                                   ),
                                 ),
-                                const Text(
-                                  'Женщина, 71',
+                                /* Text(
+                                  '${context.selectedAppointment['patient']?['gender'] ?? 'Не указан'}, ${context.selectedAppointment['patient']?['age'] ?? 'Не указан'}',
                                   style: TextStyle(
                                     fontSize: 12,
                                   ),
-                                ),
+                                ), */
                                 const SizedBox(height: 4),
                                 const Text(
                                   '10:00 - 10:45',
diff --git a/lib/screens/home/home_screen/home_screen.dart b/lib/screens/home/home_screen/home_screen.dart
index 48654d3..37af630 100755
--- a/lib/screens/home/home_screen/home_screen.dart
+++ b/lib/screens/home/home_screen/home_screen.dart
@@ -5,19 +5,25 @@ import 'package:doctorq/screens/home/home_screen/widgets/autolayouthor_item_widg
 import 'package:doctorq/screens/home/home_screen/widgets/autolayouthor_item_widget_zapisi.dart';
 import 'package:doctorq/screens/home/home_screen/widgets/doctor_item.dart';
 import 'package:doctorq/screens/home/home_screen/widgets/story_item_widget.dart';
+import 'package:doctorq/screens/medcard/create_record_page_lib.dart';
 import 'package:doctorq/screens/webviews/someWebPage.dart';
 import 'package:doctorq/screens/profile/main_notification.dart';
 import 'package:doctorq/screens/profile/main_profile.dart';
+import 'package:image_picker/image_picker.dart';
+import 'dart:io';
+import 'package:permission_handler/permission_handler.dart';
 import 'package:doctorq/screens/profile/popular_doctors.dart';
 import 'package:doctorq/screens/profile/search_doctors.dart';
 import 'package:doctorq/screens/profile/settings/appearance_screen/appearance_screen.dart';
 import 'package:doctorq/screens/stories/story_scren.dart';
+import 'package:shared_preferences/shared_preferences.dart';
 import "package:story_view/story_view.dart";
 import 'package:animate_do/animate_do.dart';
 import 'package:doctorq/extensions.dart';
 import 'package:doctorq/screens/home/specialist_doctor_screen/specialist_doctor_screen.dart';
 import 'package:doctorq/screens/home/top_doctor_screen/choose_specs_screen_step_1.dart';
 import 'package:doctorq/services/api_service.dart';
+import 'package:doctorq/services/session.dart';
 import 'package:doctorq/utils/utility.dart';
 import 'package:doctorq/widgets/spacing.dart';
 import 'widgets/autolayouthor1_item_widget.dart';
@@ -28,11 +34,151 @@ import 'package:flutter/material.dart';
 import 'package:get/get.dart';
 import 'package:http/http.dart' as http;
 
+import 'package:doctorq/models/recommendation_model.dart';
 //import 'package:random_text_reveal/random_text_reveal.dart';
 import 'package:flutter_animate/flutter_animate.dart';
 //final GlobalKey<RandomTextRevealState> globalKey = GlobalKey();
 
 class ItemController extends GetxController {
+  var cats = [].obs; // Reactive list to store fetched items
+  var users = [].obs; // Reactive list to store fetched items
+  var articles = [].obs;
+  var recommendations = <RecommendationModel>[].obs; // Reactive list for recommendations
+  var _filteredRecords = <CalendarRecordData>[].obs;
+
+  void filterRecordsByDate(DateTime date) {
+    _filteredRecords.value = _calendarRecords.where((record) {
+      return record.date.year == date.year &&
+          record.date.month == date.month &&
+          record.date.day == date.day;
+    }).toList();
+    if (_filteredRecords.isEmpty) {
+      _filteredRecords.add(CalendarRecordData(
+          date: date,
+          title: "На этот день заметки отсутствуют",
+          category: "Приемы"));
+    }
+  }
+
+  var _calendarRecords = <CalendarRecordData>[].obs;
+  final storyItems = <StoryItem>[].obs;
+  @override
+  void onInit() {
+    super.onInit();
+    refreshData();
+    //fetchStories();
+    //fetchArticles();
+    //_loadCalendarRecords().then((_) {
+    //  update(); // Ensure UI updates after loading records
+    //});
+  }
+
+  Future<void> _loadCalendarRecords() async {
+    final prefs = await SharedPreferences.getInstance();
+    final recordsString = prefs.getString('calendar_records');
+    if (recordsString != null) {
+      try {
+        final List<dynamic> jsonList = jsonDecode(recordsString);
+        _calendarRecords.value =
+            jsonList.map((item) => CalendarRecordData.fromJson(item)).toList();
+        // Initialize with today's records
+        filterRecordsByDate(DateTime.now());
+      } catch (e) {
+        print('Error decoding calendar records: $e');
+        _calendarRecords.value = [];
+        _filteredRecords.value = [];
+      }
+    }
+  }
+
+  Future<void> fetchArticles() async {
+    print('fetching articles');
+    var response = await http.get(Uri.parse(
+      'https://admin.onlinedoctor.su/api/articles',
+    ));
+
+    if (response.statusCode == 200) {
+      List jsonResponse = json.decode(response.body)['data'];
+      // items = jsonResponse;
+      articles.value = jsonResponse;
+//      jsonResponse.map((item) => SpecialistModel.fromJson(item)).toList();
+    }
+  }
+
+  Future<void> fetchStories() async {
+    final response =
+        await http.get(Uri.parse('https://admin.onlinedoctor.su/api/stories'));
+
+    if (response.statusCode == 200) {
+      final jsonData = json.decode(response.body);
+      print('https://admin.onlinedoctor.su/storage/' +
+          jsonData['data'][0]['image']);
+      // Extract data from JSON
+      final data = (jsonData['data'] as List<dynamic>)
+          .map((e) => StoryItem.inlineImage(
+                imageFit: BoxFit.cover,
+                url: 'https://admin.onlinedoctor.su/storage/' + e['image'],
+                controller: StoryController(),
+                caption: Text(
+                  e['title'],
+                  style: const TextStyle(
+                    color: Colors.white,
+                    backgroundColor: Colors.black,
+                    fontSize: 17,
+                  ),
+                ),
+              ))
+          .toList();
+      //print(data);
+      //storyItems.value = data;
+      storyItems.value = data;
+    } else {
+      // Handle error
+      print('Failed to load stories');
+    }
+  }
+
+
+  Future<void> fetchRecommendations() async {
+    final response = await http.get(Uri.parse('https://admin.onlinedoctor.su/api/recommendations'));
+
+    if (response.statusCode == 200) {
+      final jsonData = json.decode(response.body);
+      final List<dynamic> data = jsonData['data'];
+      recommendations.value = data.map((item) => RecommendationModel.fromJson(item) as RecommendationModel).toList();
+      print('Loaded ${recommendations.length} recommendations');
+    } else {
+      // Handle error
+      print('Failed to load recommendations: ${response.statusCode}');
+    }
+  }
+
+  Future<void> refreshData() async {
+    // fetchDoctors();
+    fetchStories();
+    fetchArticles();
+        fetchRecommendations();
+    getDoctors();
+    _loadCalendarRecords().then((res) {
+       
+      filterRecordsByDate(DateTime.now());
+       }
+       );
+    // Simulating fetching data from an API
+    var response = await http.get(Uri.parse(
+      'https://www.admin.onlinedoctor.su/api/specializations',
+    ));
+
+    if (response.statusCode == 200) {
+      List jsonResponse = json.decode(response.body)['data'];
+      // items = jsonResponse;
+      cats.value = jsonResponse;
+//      jsonResponse.map((item) => SpecialistModel.fromJson(item)).toList();
+    }
+  }
+}
+//проверить разницу
+class ItemControllerDoctorOld extends GetxController {
   var cats = [].obs; // Reactive list to store fetched items
   var users = [].obs; // Reactive list to store fetched items
   var articles = [].obs;
@@ -112,11 +258,57 @@ class ItemController extends GetxController {
 }
 
 // ignore: must_be_immutable
-class HomeScreen extends StatelessWidget {
+class HomeScreen extends StatefulWidget {
+  HomeScreen({Key? key}) : super(key: key);
+
+  @override
+  _HomeScreenState createState() => _HomeScreenState();
+}
+
+class _HomeScreenState extends State<HomeScreen> {
   TextEditingController autoLayoutVerController = TextEditingController();
   final ItemController itemController = Get.put(ItemController());
+  File? _image;
+
+  Future<void> pickImage() async {
+    var pr = await SharedPreferences.getInstance();
+    print(pr.getString('user_id'));
+    print(pr.getString('photo'));
+    print("prefs");
+    var status = await Permission.photos.request().isGranted;
+    await Permission.mediaLibrary.request().isGranted;
+
+    final pickedFile =
+        await ImagePicker().pickImage(source: ImageSource.gallery);
+    print(pickedFile);
+
+    if (pickedFile != null) {
+      _image = File(pickedFile.path);
+      if (_image != null) {
+        bool success = await updateProfileWithImage(
+          context,
+          pickedFile.path,
+          context.userData['first_name'],
+          context.userData['email'],
+        );
+
+        if (success) {
+          // После успешного обновления, перезагружаем данные пользователя
+          final updatedUser = await Session.getCurrentUser();
+          if (updatedUser != null) {
+            // Обновляем контекст с новыми данными пользователя
+            context.userData['photo'] = updatedUser.photo;
+            setState(() {
+              // Принудительно обновляем UI
+            });
+          }
+        }
+      }
+    } else {
+      print('No image selected');
+    }
+  }
 
-  HomeScreen({Key? key}) : super(key: key);
   @override
   Widget build(BuildContext context) {
     var titles = [
@@ -168,10 +360,13 @@ class HomeScreen extends StatelessWidget {
                         mainAxisAlignment: MainAxisAlignment.start,
                         mainAxisSize: MainAxisSize.min,
                         children: [
-                          CircleAvatar(
-                            radius: getVerticalSize(25),
-                            backgroundImage:
-                                NetworkImage(context.userData['photo']),
+                          GestureDetector(
+                            onTap: pickImage,
+                            child: CircleAvatar(
+                              radius: getVerticalSize(25),
+                              backgroundImage:
+                                  NetworkImage(context.userData['photo']),
+                            ),
                           ),
 
                           HorizontalSpace(width: 20),
@@ -359,7 +554,7 @@ class HomeScreen extends StatelessWidget {
                                 top: 10,
                               ),
                               scrollDirection: Axis.horizontal,
-                              physics: const BouncingScrollPhysics(),
+                              physics: const ClampingScrollPhysics(),
                               itemCount: itemController.cats.length,
                               separatorBuilder: (context, index) {
                                 return HorizontalSpace(width: 16);
@@ -472,7 +667,7 @@ class HomeScreen extends StatelessWidget {
                                 top: 17,
                               ),
                               scrollDirection: Axis.horizontal,
-                              physics: const BouncingScrollPhysics(),
+                              physics: const ClampingScrollPhysics(),
                               itemCount: itemController.cats.length,
                               separatorBuilder: (context, index) {
                                 return HorizontalSpace(width: 16);
@@ -892,18 +1087,18 @@ class DoctorsSliderHeader extends StatelessWidget {
 }
 
 Widget fourThings(titles, images) {
-  return SizedBox(
-    height: getVerticalSize(120.00),
-    width: getHorizontalSize(528.00),
-    child: ListView.separated(
-      padding: getPadding(
-        left: 20,
-        right: 20,
-        top: 17,
-      ),
-      scrollDirection: Axis.horizontal,
-      physics: const BouncingScrollPhysics(),
-      itemCount: 4,
+    return SizedBox(
+      height: getVerticalSize(120.00),
+      width: getHorizontalSize(528.00),
+      child: ListView.separated(
+        padding: getPadding(
+          left: 20,
+          right: 20,
+          top: 17,
+        ),
+        scrollDirection: Axis.horizontal,
+        physics: const ClampingScrollPhysics(),
+        itemCount: 4,
       separatorBuilder: (context, index) {
         return HorizontalSpace(width: 16);
       },
@@ -994,7 +1189,7 @@ class DoctorsSilder extends StatelessWidget {
             top: 26,
           ),
           scrollDirection: Axis.horizontal,
-          physics: const BouncingScrollPhysics(),
+          physics: const ClampingScrollPhysics(),
           itemCount: context.doctorsData.length,
           separatorBuilder: (context, index) {
             return HorizontalSpace(width: 16);
@@ -1032,7 +1227,7 @@ Widget someObxList(context, itemController) {
             top: 27,
           ),
           scrollDirection: Axis.horizontal,
-          physics: const BouncingScrollPhysics(),
+          physics: const ClampingScrollPhysics(),
           itemCount: itemController.articles.length,
           separatorBuilder: (context, index) {
             return HorizontalSpace(width: 16);
@@ -1254,7 +1449,7 @@ Widget specsBody(context, isDark, itemController) {
             top: 27,
           ),
           scrollDirection: Axis.horizontal,
-          physics: const BouncingScrollPhysics(),
+          physics: const ClampingScrollPhysics(),
           itemCount: itemController.cats.length,
           separatorBuilder: (context, index) {
             return HorizontalSpace(width: 16);
diff --git a/lib/screens/main_screen.dart b/lib/screens/main_screen.dart
index 61ae407..503a2c0 100755
--- a/lib/screens/main_screen.dart
+++ b/lib/screens/main_screen.dart
@@ -96,7 +96,7 @@ class Main extends StatelessWidget {
       PersistentTabConfig(
           screen: MainProfileScreen(),
           item: ItemConfig(
-            title: "Чаты",
+            title: "Профиль",
             icon: Icon(Icons.account_box,
                 color: const Color.fromARGB(255, 92, 92, 92)), // Image.asset(
             inactiveIcon: Icon(Icons.account_box,
diff --git a/lib/screens/online_reception_audio.dart b/lib/screens/online_reception_audio.dart
index a464ca4..921f805 100644
--- a/lib/screens/online_reception_audio.dart
+++ b/lib/screens/online_reception_audio.dart
@@ -1,6 +1,7 @@
 import 'package:doctorq/screens/articles/articles.dart';
 import 'package:doctorq/screens/online_reception_audio_start.dart';
 import 'package:flutter/material.dart';
+import 'package:doctorq/extensions.dart';
 
 class OnlineReceptionAudio extends StatelessWidget {
   @override
@@ -209,8 +210,9 @@ SizedBox(height: 20),
                               children: [
                                 CircleAvatar(
                                   radius: 30,
-                                  backgroundImage:
-                                      AssetImage('assets/images/11.png'),
+                                  backgroundImage: context.selectedAppointment['patient']?['profile_image'] != null
+                                      ? NetworkImage(context.selectedAppointment['patient']?['profile_image'])
+                                      : AssetImage('assets/images/11.png') as ImageProvider,
                                 ),
                                 const SizedBox(width: 16),
                                 Expanded(
@@ -218,18 +220,18 @@ SizedBox(height: 20),
                                     crossAxisAlignment:
                                         CrossAxisAlignment.start,
                                     children: [
-                                      const Text(
-                                         'Парфенова К.С.',
+                                      Text(
+                                        '${context.selectedAppointment['patient']?['first_name'] ?? ''} ${context.selectedAppointment['patient']?['last_name'] ?? ''}',
                                         style: TextStyle(
                                           fontSize: 14,
                                           fontWeight: FontWeight.bold,
                                         ),
                                       ),
-                                      const Text(
-                                        'Женщина, 71',
+                                      /* Text(
+                                        '${context.selectedAppointment['patient']?['gender'] ?? 'Не указан'}, ${context.selectedAppointment['patient']?['age'] ?? 'Не указан'}',
                                         style: TextStyle(
                                          fontSize: 12 
-                                        )),
+                                        )), */
                                       const SizedBox(height: 4), // Добавляем отступ между строками
 const Text(
 'Аудио / онлайн консультация',
@@ -464,4 +466,4 @@ Row(
               );
         
   }
-}
\ No newline at end of file
+}
diff --git a/lib/screens/online_reception_audio_complete.dart b/lib/screens/online_reception_audio_complete.dart
index 0001630..fd33289 100644
--- a/lib/screens/online_reception_audio_complete.dart
+++ b/lib/screens/online_reception_audio_complete.dart
@@ -6,6 +6,7 @@ import 'package:doctorq/screens/appointments/book_screen/book_screen.dart';
 import 'package:doctorq/screens/appointments/steps/step_2_filled_screen/step_2_filled_screen.dart';
 import 'package:doctorq/screens/home/home_screen/home_screen.dart';
 import 'package:doctorq/services/auth_service.dart';
+import 'package:doctorq/services/api_service.dart';
 import 'package:doctorq/widgets/top_back.dart';
 import '../../../../widgets/spacing.dart';
 import 'package:doctorq/app_export.dart';
@@ -82,6 +83,15 @@ class OnlineReceptionAudioComplete extends StatefulWidget {
 }
 
 class _AppointmentsStep3FilledScreenState extends State<OnlineReceptionAudioComplete> {
+  int _selectedRating = 5;
+  final TextEditingController _reviewController = TextEditingController();
+  bool _isSubmitting = false;
+
+  @override
+  void dispose() {
+    _reviewController.dispose();
+    super.dispose();
+  }
   @override
   Widget build(BuildContext context) {
     bool isDark = Theme.of(context).brightness == Brightness.dark;
@@ -162,7 +172,7 @@ class _AppointmentsStep3FilledScreenState extends State<OnlineReceptionAudioComp
             crossAxisAlignment: CrossAxisAlignment.center,
                                 children: [ 
                                   Text(
-                                    'Аудио с врачом успешно завершено',
+                                    'Аудио с пациентом успешно завершено',
                                     style: TextStyle(
                                       color:
                                           const Color.fromARGB(255, 17, 17, 17),
@@ -194,8 +204,9 @@ const SizedBox(width: 8),
                                 children: [
                                   CircleAvatar(
                                     radius: 30,
-                                    backgroundImage:
-                                        AssetImage('assets/images/11.png'),
+                                    backgroundImage: context.selectedAppointment['patient']?['profile_image'] != null
+                                        ? NetworkImage(context.selectedAppointment['patient']?['profile_image'])
+                                        : AssetImage('assets/images/11.png') as ImageProvider,
                                   ),
                                   const SizedBox(width: 16),
                                   Expanded(
@@ -203,17 +214,21 @@ const SizedBox(width: 8),
                                       crossAxisAlignment:
                                           CrossAxisAlignment.start,
                                       children: [
-                                        const Text('Парфенова К.С.',
-                                            style: TextStyle(
-                                                fontWeight: FontWeight.bold)),
-                                        const Text('Женщина, 71'),
-                                        const Text(
-'О враче    Был в сети 1 мин назад',
-style: TextStyle(
-fontSize: 10,
-color: Color.fromARGB(255, 91, 91, 91),
-),
-),
+                                        Text(
+                                          '${context.selectedAppointment['patient']?['first_name'] ?? ''} ${context.selectedAppointment['patient']?['last_name'] ?? ''}',
+                                          style: TextStyle(
+                                              fontWeight: FontWeight.bold)
+                                        ),
+                                        /* Text(
+                                          '${context.selectedAppointment['patient']?['gender'] ?? 'Не указан'}, ${context.selectedAppointment['patient']?['age'] ?? 'Не указан'}',
+                                        ),
+                                        Text(
+                                          'О пациенте    Был(а) в сети недавно',
+                                          style: TextStyle(
+                                            fontSize: 10,
+                                            color: Color.fromARGB(255, 91, 91, 91),
+                                          ),
+                                        ), */
                                       ],
                                     ),
                                   ),
@@ -380,115 +395,179 @@ color: Color.fromARGB(255, 91, 91, 91),
       barrierColor: Colors.black.withOpacity(0.5),
       isScrollControlled: true,
       builder: (BuildContext context) {
-        return Container(
-          height: MediaQuery.of(context).size.height * 0.75,
-          decoration: BoxDecoration(
-            color: Colors.white,
-            borderRadius: BorderRadius.only(
-              topLeft: Radius.circular(24),
-              topRight: Radius.circular(24),
-            ),
-          ),
-          child: Column(
-            children: [
-              // Стрелка для свайпа вниз
-              Container(
-                height: 4,
-                width: 40,
-                margin: EdgeInsets.only(top: 8, bottom: 16),
-                decoration: BoxDecoration(
-                  color: Colors.grey[300],
-                  borderRadius: BorderRadius.circular(2),
-                ),
-              ),
-              
-              // Звездочки
-              Row(
-                mainAxisAlignment: MainAxisAlignment.center,
-                children: List.generate(5, (_) => Icon(Icons.star, color: Colors.yellow[700], size: 28)),
-              ),
-              
-              // Текст вопроса
-              Padding(
-                padding: EdgeInsets.symmetric(horizontal: 24,vertical: 14),
-                child: Text(
-                  'Как прошел ваш онлайн прием с врачом?',
-                  style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
+        return StatefulBuilder(
+          builder: (BuildContext context, StateSetter setState) {
+            return Container(
+              height: MediaQuery.of(context).size.height * 0.75,
+              decoration: BoxDecoration(
+                color: Colors.white,
+                borderRadius: BorderRadius.only(
+                  topLeft: Radius.circular(24),
+                  topRight: Radius.circular(24),
                 ),
               ),
-              
-              // Подсказка о количестве символов
-              Padding(
-                padding: EdgeInsets.symmetric(horizontal: 24),
-                child: Text(
-                  'не более 250 символов',
-                  style: TextStyle(fontSize: 12, color: Colors.grey[600]),
-                ),
-              ),
-              
-              // Контейнер с отзывом
-              Padding(
-                padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
-                child: Container(
-                  decoration: BoxDecoration(
-                    color: Color.fromRGBO(244, 248, 255, 1),
-                    borderRadius: BorderRadius.circular(16),
+              child: Column(
+                children: [
+                  // Стрелка для свайпа вниз
+                  Container(
+                    height: 4,
+                    width: 40,
+                    margin: EdgeInsets.only(top: 8, bottom: 16),
+                    decoration: BoxDecoration(
+                      color: Colors.grey[300],
+                      borderRadius: BorderRadius.circular(2),
+                    ),
                   ),
-                  padding: EdgeInsets.all(16),
-                  child: Text(
-                    'Мне понравился врач . Сразу запросил доступ к моей медкарте и на этом мы сэкономили время, учитывая, что сама консультация стоит недешево. Диагноз поставил предварительный . В целом, буду теперь консультироваться у него периодически в целях профилактики.',
-                    style: TextStyle(color: Colors.black54),
+                  
+                  // Звездочки для рейтинга
+                  Row(
+                    mainAxisAlignment: MainAxisAlignment.center,
+                    children: List.generate(5, (index) {
+                      return GestureDetector(
+                        onTap: () {
+                          setState(() {
+                            _selectedRating = index + 1;
+                          });
+                        },
+                        child: Icon(
+                          Icons.star,
+                          color: index < _selectedRating 
+                              ? Colors.yellow[700] 
+                              : Colors.grey[300],
+                          size: 28,
+                        ),
+                      );
+                    }),
                   ),
-                ),
-              ),
-              
-              // Секция для файлов
-              Padding(
-                padding: EdgeInsets.symmetric(horizontal: 24),
-                child: Row(
-                  children: [
-                    Column(
-                      crossAxisAlignment: CrossAxisAlignment.center,
-                      children: [
-                        Container(
-                          width: 40,
-                          height: 40,
-                          decoration: BoxDecoration(
-                            color: Color.fromRGBO(228, 240, 255, 1),
-                            borderRadius: BorderRadius.circular(20),
-                          ),
-                          child: Icon(Icons.add, color: Colors.blue),
+                  
+                  // Текст вопроса (обновлен для врача)
+                  Padding(
+                    padding: EdgeInsets.symmetric(horizontal: 24, vertical: 14),
+                    child: Text(
+                      'Как прошел онлайн прием с пациентом?',
+                      style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
+                    ),
+                  ),
+                  
+                  // Подсказка о количестве символов
+                  Padding(
+                    padding: EdgeInsets.symmetric(horizontal: 24),
+                    child: Text(
+                      'не более 250 символов',
+                      style: TextStyle(fontSize: 12, color: Colors.grey[600]),
+                    ),
+                  ),
+                  
+                  // Поле для ввода отзыва
+                  Padding(
+                    padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
+                    child: Container(
+                      decoration: BoxDecoration(
+                        color: Color.fromRGBO(244, 248, 255, 1),
+                        borderRadius: BorderRadius.circular(16),
+                      ),
+                      padding: EdgeInsets.all(16),
+                      child: TextField(
+                        controller: _reviewController,
+                        maxLines: 4,
+                        maxLength: 250,
+                        decoration: InputDecoration(
+                          hintText: 'Напишите ваш отзыв о пациенте здесь...',
+                          border: InputBorder.none,
+                          counterText: '',
                         ),
-                        SizedBox(height: 4),
-                        Text(
-                          'Добавить файл',
-                          style: TextStyle(fontSize: 10),
+                        style: TextStyle(color: Colors.black87),
+                      ),
+                    ),
+                  ),
+                  
+                  // Секция для файлов
+                  Padding(
+                    padding: EdgeInsets.symmetric(horizontal: 24),
+                    child: Row(
+                      children: [
+                        Column(
+                          crossAxisAlignment: CrossAxisAlignment.center,
+                          children: [
+                            Container(
+                              width: 40,
+                              height: 40,
+                              decoration: BoxDecoration(
+                                color: Color.fromRGBO(228, 240, 255, 1),
+                                borderRadius: BorderRadius.circular(20),
+                              ),
+                              child: Icon(Icons.add, color: Colors.blue),
+                            ),
+                            SizedBox(height: 4),
+                            Text(
+                              'Добавить файл',
+                              style: TextStyle(fontSize: 10),
+                            ),
+                          ],
                         ),
+                        Expanded(child: Container()),
                       ],
                     ),
-                    Expanded(child: Container()), // Пространство для будущих файлов
-                  ],
-                ),
-              ),
-              
-              // Кнопка отправки отзыва
-              Padding(
-                padding: EdgeInsets.all(24),
-                child: CustomButton(
-                 
-                  width: double.infinity,
-                  text: "Оставить отзыв",
-                  variant: ButtonVariant.FillBlueA400,
-                  fontStyle: ButtonFontStyle.SourceSansProSemiBold18,
-                  alignment: Alignment.center,
-                  onPressed: () {
-                    Navigator.pop(context);
-                    _showReviewSuccessDialog(context);
-                  },
-                ),
+                  ),
+                  
+                  // Кнопка отправки отзыва
+                  Padding(
+                    padding: EdgeInsets.all(24),
+                    child: _isSubmitting
+                        ? CircularProgressIndicator()
+                        : CustomButton(
+                            width: double.infinity,
+                            text: "Оставить отзыв",
+                            variant: ButtonVariant.FillBlueA400,
+                            fontStyle: ButtonFontStyle.SourceSansProSemiBold18,
+                            alignment: Alignment.center,
+                            onPressed: () async {
+                              if (_reviewController.text.isEmpty) {
+                                ScaffoldMessenger.of(context).showSnackBar(
+                                  SnackBar(content: Text('Пожалуйста, напишите отзыв')),
+                                );
+                                return;
+                              }
+                              
+                              setState(() {
+                                _isSubmitting = true;
+                              });
+                              
+                              // Получаем реальный ID пациента из выбранной записи
+                              String patientId = context.selectedAppointment['patient']?['user_id']?.toString() ?? '';
+                              
+                              if (patientId.isEmpty) {
+                                ScaffoldMessenger.of(context).showSnackBar(
+                                  SnackBar(content: Text('Не удалось получить данные пациента')),
+                                );
+                                return;
+                              }
+                              
+                              bool success = await createDoctorReview(
+                                patientId: patientId,
+                                rating: _selectedRating,
+                                review: _reviewController.text,
+                              );
+                              
+                              setState(() {
+                                _isSubmitting = false;
+                              });
+                              
+                              if (success) {
+                                Navigator.pop(context);
+                                _showReviewSuccessDialog(context);
+                              } else {
+                                ScaffoldMessenger.of(context).showSnackBar(
+                                  SnackBar(content: Text('Ошибка при отправке отзыва')),
+                                );
+                              }
+                            },
+                          ),
+                  ),
+                ],
               ),
-            ],
-          ),
+            );
+          },
         );
       },
     );
@@ -538,4 +617,4 @@ color: Color.fromARGB(255, 91, 91, 91),
       },
     );
   }
-}
\ No newline at end of file
+}
diff --git a/lib/screens/online_reception_audio_start.dart b/lib/screens/online_reception_audio_start.dart
index 3aa0985..97e4691 100644
--- a/lib/screens/online_reception_audio_start.dart
+++ b/lib/screens/online_reception_audio_start.dart
@@ -1,6 +1,7 @@
 import 'package:doctorq/screens/articles/articles.dart';
 import 'package:doctorq/screens/online_reception_audio_complete.dart';
 import 'package:doctorq/screens/online_reception_audio_start_two.dart';
+import 'package:doctorq/extensions.dart';
 import 'package:flutter/material.dart';
 
 class OnlineReceptionAudioStart extends StatefulWidget {
@@ -18,7 +19,7 @@ class _OnlineReceptionAudioStartState extends State<OnlineReceptionAudioStart> {
   Widget build(BuildContext context) {
     return Scaffold(
       appBar: AppBar(
-        title: const Text('Аудио с врачом'),
+        title: const Text('Аудио с пациентом'),
       ),
       body: SafeArea(
         child: Column(
@@ -53,19 +54,20 @@ class _OnlineReceptionAudioStartState extends State<OnlineReceptionAudioStart> {
                                     children: [
                                       CircleAvatar(
                                   radius: 30,
-                                  backgroundImage:
-                                      AssetImage('assets/images/11.png'),
+                                  backgroundImage: context.selectedAppointment['doctor']?['profile_image'] != null
+                                      ? NetworkImage(context.selectedAppointment['doctor']?['profile_image'])
+                                      : AssetImage('assets/images/11.png') as ImageProvider,
                                 ),
                                 const SizedBox(width: 16),
-                                      const Text(
-                                         'Трофимова Е.С.',
+                                      Text(
+                                        '${context.selectedAppointment['doctor']?['first_name'] ?? ''} ${context.selectedAppointment['doctor']?['last_name'] ?? ''}',
                                         style: TextStyle(
                                           fontSize: 14,
                                           fontWeight: FontWeight.bold,
                                         ),
                                       ),
-                                      const Text(
-                                        'Психотерапевт',
+                                      Text(
+                                        context.selectedAppointment['doctor']?['specialization'] ?? 'Врач',
                                         style: TextStyle(
                                           color: Color.fromARGB(255, 136, 136, 136),
                                          fontSize: 12 
@@ -192,4 +194,4 @@ const SizedBox(height: 4), // Добавляем отступ между стр
       ),
     );
   }
-}
\ No newline at end of file
+}
diff --git a/lib/screens/online_reception_audio_start_two.dart b/lib/screens/online_reception_audio_start_two.dart
index abac2f6..239464d 100644
--- a/lib/screens/online_reception_audio_start_two.dart
+++ b/lib/screens/online_reception_audio_start_two.dart
@@ -1,5 +1,6 @@
 import 'package:doctorq/screens/articles/articles.dart';
 import 'package:doctorq/screens/online_reception_audio_complete.dart';
+import 'package:doctorq/extensions.dart';
 import 'package:flutter/material.dart';
 
 class OnlineReceptionAudioStartTwo extends StatefulWidget {
@@ -18,7 +19,7 @@ class _OnlineReceptionAudioStartTwoState
   Widget build(BuildContext context) {
     return Scaffold(
       appBar: AppBar(
-        title: const Text('Аудио с врачом'),
+        title: const Text('Аудио с пациентом'),
       ),
       body: SafeArea(
         child: Column(
@@ -53,19 +54,20 @@ class _OnlineReceptionAudioStartTwoState
                                     children: [
                                       CircleAvatar(
                                   radius: 30,
-                                  backgroundImage:
-                                      AssetImage('assets/images/11.png'),
+                                  backgroundImage: context.selectedAppointment['doctor']?['profile_image'] != null
+                                      ? NetworkImage(context.selectedAppointment['doctor']?['profile_image'])
+                                      : AssetImage('assets/images/11.png') as ImageProvider,
                                 ),
                                 const SizedBox(width: 16),
-                                      const Text(
-                                         'Трофимова Е.С.',
+                                      Text(
+                                        '${context.selectedAppointment['doctor']?['first_name'] ?? ''} ${context.selectedAppointment['doctor']?['last_name'] ?? ''}',
                                         style: TextStyle(
                                           fontSize: 14,
                                           fontWeight: FontWeight.bold,
                                         ),
                                       ),
-                                      const Text(
-                                        'Психотерапевт',
+                                      Text(
+                                        context.selectedAppointment['doctor']?['specialization'] ?? 'Врач',
                                         style: TextStyle(
                                           color: Color.fromARGB(255, 136, 136, 136),
                                          fontSize: 12 
@@ -252,4 +254,4 @@ const SizedBox(height: 4), // Добавляем отступ между стр
       ),
     );
   }
-}
\ No newline at end of file
+}
diff --git a/lib/screens/online_reception_chat.dart b/lib/screens/online_reception_chat.dart
index ca4d23c..79beec6 100644
--- a/lib/screens/online_reception_chat.dart
+++ b/lib/screens/online_reception_chat.dart
@@ -1,8 +1,53 @@
 import 'package:doctorq/screens/articles/articles.dart';
 import 'package:doctorq/screens/online_reception_chat_start.dart';
+import 'package:doctorq/extensions.dart';
 import 'package:flutter/material.dart';
 
 class OnlineReceptionChat extends StatelessWidget {
+  
+  String _formatDate(dynamic date) {
+    if (date == null) return 'Дата не указана';
+    
+    try {
+      DateTime dateTime;
+      if (date is String) {
+        dateTime = DateTime.parse(date);
+      } else if (date is DateTime) {
+        dateTime = date;
+      } else {
+        return 'Неверный формат даты';
+      }
+      
+      return '${dateTime.day.toString().padLeft(2, '0')}.${dateTime.month.toString().padLeft(2, '0')}.${dateTime.year.toString().substring(2)}';
+    } catch (e) {
+      return 'Ошибка даты';
+    }
+  }
+
+  String _formatTime(dynamic time) {
+    if (time == null) return 'Время не указано';
+    
+    try {
+      if (time is String) {
+        // Проверяем, является ли время валидным форматом времени
+        final timeRegex = RegExp(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$');
+        if (timeRegex.hasMatch(time)) {
+          return time;
+        }
+        
+        // Пробуем распарсить как DateTime
+        final parsedTime = DateTime.tryParse(time);
+        if (parsedTime != null) {
+          return '${parsedTime.hour.toString().padLeft(2, '0')}:${parsedTime.minute.toString().padLeft(2, '0')}';
+        }
+      }
+      
+      return 'Неверный формат времени';
+    } catch (e) {
+      return 'Ошибка времени';
+    }
+  }
+
   @override
   Widget build(BuildContext context) {
     return Scaffold(
@@ -124,8 +169,8 @@ Container(
                                           Expanded(
                                             flex: 3,
                                             child: Container(
-                                              child: const Text(
-                                                '26.01.25',
+                                              child: Text(
+                                                _formatDate(context.selectedAppointment['date']),
                                                 style: TextStyle(
                                                   fontWeight: FontWeight.bold,
                                                   color: Color.fromARGB(
@@ -185,8 +230,8 @@ Container(
                                           Expanded(
                                             flex: 3,
                                             child: Container(
-                                              child: const Text(
-                                                '14:00',
+                                              child: Text(
+                                                _formatTime(context.selectedAppointment['appointment_time']),
                                                 style: TextStyle(
                                                   fontWeight: FontWeight.bold,
                                                   color: Color.fromARGB(
@@ -209,8 +254,9 @@ SizedBox(height: 20),
                               children: [
                                 CircleAvatar(
                                   radius: 30,
-                                  backgroundImage:
-                                      AssetImage('assets/images/11.png'),
+                                  backgroundImage: context.selectedAppointment['patient']?['profile_image'] != null
+                                      ? NetworkImage(context.selectedAppointment['patient']?['profile_image'])
+                                      : AssetImage('assets/images/11.png') as ImageProvider,
                                 ),
                                 const SizedBox(width: 16),
                                 Expanded(
@@ -218,15 +264,15 @@ SizedBox(height: 20),
                                     crossAxisAlignment:
                                         CrossAxisAlignment.start,
                                     children: [
-                                      const Text(
-                                         'Парфенова К.С.',
+                                      Text(
+                                        '${context.selectedAppointment['patient']?['first_name'] ?? ''} ${context.selectedAppointment['patient']?['last_name'] ?? ''}',
                                         style: TextStyle(
                                           fontSize: 14,
                                           fontWeight: FontWeight.bold,
                                         ),
                                       ),
-                                      const Text(
-                                        'Женщина, 71',
+                                      Text(
+                                        '${context.selectedAppointment['patient']?['gender'] ?? 'Не указан'}, ${context.selectedAppointment['patient']?['age'] ?? 'Не указан'}',
                                         style: TextStyle(
                                          fontSize: 12 
                                         )),
@@ -464,4 +510,4 @@ Row(
               );
         
   }
-}
\ No newline at end of file
+}
diff --git a/lib/screens/online_reception_chat_complete.dart b/lib/screens/online_reception_chat_complete.dart
index f984a95..15188ef 100644
--- a/lib/screens/online_reception_chat_complete.dart
+++ b/lib/screens/online_reception_chat_complete.dart
@@ -6,6 +6,7 @@ import 'package:doctorq/screens/appointments/book_screen/book_screen.dart';
 import 'package:doctorq/screens/appointments/steps/step_2_filled_screen/step_2_filled_screen.dart';
 import 'package:doctorq/screens/home/home_screen/home_screen.dart';
 import 'package:doctorq/services/auth_service.dart';
+import 'package:doctorq/services/api_service.dart';
 import 'package:doctorq/widgets/top_back.dart';
 import '../../../../widgets/spacing.dart';
 import 'package:doctorq/app_export.dart';
@@ -82,6 +83,15 @@ class OnlineReceptionChatComplete extends StatefulWidget {
 }
 
 class _AppointmentsStep3FilledScreenState extends State<OnlineReceptionChatComplete> {
+  int _selectedRating = 5;
+  final TextEditingController _reviewController = TextEditingController();
+  bool _isSubmitting = false;
+
+  @override
+  void dispose() {
+    _reviewController.dispose();
+    super.dispose();
+  }
   @override
   Widget build(BuildContext context) {
     bool isDark = Theme.of(context).brightness == Brightness.dark;
@@ -162,7 +172,7 @@ class _AppointmentsStep3FilledScreenState extends State<OnlineReceptionChatCompl
             crossAxisAlignment: CrossAxisAlignment.center,
                                 children: [ 
                                   Text(
-                                    'Чат с врачом успешно завершен',
+                                    'Чат с пациентом успешно завершен',
                                     style: TextStyle(
                                       color:
                                           const Color.fromARGB(255, 17, 17, 17),
@@ -194,8 +204,9 @@ const SizedBox(width: 8),
                                 children: [
                                   CircleAvatar(
                                     radius: 30,
-                                    backgroundImage:
-                                        AssetImage('assets/images/11.png'),
+                                    backgroundImage: context.selectedAppointment['patient']?['profile_image'] != null
+                                        ? NetworkImage(context.selectedAppointment['patient']?['profile_image'])
+                                        : AssetImage('assets/images/11.png') as ImageProvider,
                                   ),
                                   const SizedBox(width: 16),
                                   Expanded(
@@ -203,17 +214,22 @@ const SizedBox(width: 8),
                                       crossAxisAlignment:
                                           CrossAxisAlignment.start,
                                       children: [
-                                        const Text('Парфенова К.С.',
-                                            style: TextStyle(
-                                                fontWeight: FontWeight.bold)),
-                                        const Text('Женщина, 71'),
-                                        const Text(
-'О враче    Был в сети 1 мин назад',
-style: TextStyle(
-fontSize: 10,
-color: Color.fromARGB(255, 91, 91, 91),
-),
-),
+                                        //Text(context.selectedAppointment.toString()),
+                                        Text(
+                                          '${context.selectedAppointment['patient']?['first_name'] ?? ''} ${context.selectedAppointment['patient']?['last_name'] ?? ''}',
+                                          style: TextStyle(
+                                              fontWeight: FontWeight.bold)
+                                        ),
+                                        /*Text(
+                                          '${context.selectedAppointment['patient']?['gender'] ?? 'Не указан'}, ${context.selectedAppointment['patient']?['age'] ?? 'Не указан'}',
+                                        ),
+                                        Text(
+                                          'О пациенте    Был(а) в сети недавно',
+                                          style: TextStyle(
+                                            fontSize: 10,
+                                            color: Color.fromARGB(255, 91, 91, 91),
+                                          ),
+                                        ),*/
                                       ],
                                     ),
                                   ),
@@ -381,115 +397,179 @@ color: Color.fromARGB(255, 91, 91, 91),
       barrierColor: Colors.black.withOpacity(0.5),
       isScrollControlled: true,
       builder: (BuildContext context) {
-        return Container(
-          height: MediaQuery.of(context).size.height * 0.75,
-          decoration: BoxDecoration(
-            color: Colors.white,
-            borderRadius: BorderRadius.only(
-              topLeft: Radius.circular(24),
-              topRight: Radius.circular(24),
-            ),
-          ),
-          child: Column(
-            children: [
-              // Стрелка для свайпа вниз
-              Container(
-                height: 4,
-                width: 40,
-                margin: EdgeInsets.only(top: 8, bottom: 16),
-                decoration: BoxDecoration(
-                  color: Colors.grey[300],
-                  borderRadius: BorderRadius.circular(2),
-                ),
-              ),
-              
-              // Звездочки
-              Row(
-                mainAxisAlignment: MainAxisAlignment.center,
-                children: List.generate(5, (_) => Icon(Icons.star, color: Colors.yellow[700], size: 28)),
-              ),
-              
-              // Текст вопроса
-              Padding(
-                padding: EdgeInsets.symmetric(horizontal: 24,vertical: 14),
-                child: Text(
-                  'Как прошел ваш онлайн прием с врачом?',
-                  style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
+        return StatefulBuilder(
+          builder: (BuildContext context, StateSetter setState) {
+            return Container(
+              height: MediaQuery.of(context).size.height * 0.75,
+              decoration: BoxDecoration(
+                color: Colors.white,
+                borderRadius: BorderRadius.only(
+                  topLeft: Radius.circular(24),
+                  topRight: Radius.circular(24),
                 ),
               ),
-              
-              // Подсказка о количестве символов
-              Padding(
-                padding: EdgeInsets.symmetric(horizontal: 24),
-                child: Text(
-                  'не более 250 символов',
-                  style: TextStyle(fontSize: 12, color: Colors.grey[600]),
-                ),
-              ),
-              
-              // Контейнер с отзывом
-              Padding(
-                padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
-                child: Container(
-                  decoration: BoxDecoration(
-                    color: Color.fromRGBO(244, 248, 255, 1),
-                    borderRadius: BorderRadius.circular(16),
+              child: Column(
+                children: [
+                  // Стрелка для свайпа вниз
+                  Container(
+                    height: 4,
+                    width: 40,
+                    margin: EdgeInsets.only(top: 8, bottom: 16),
+                    decoration: BoxDecoration(
+                      color: Colors.grey[300],
+                      borderRadius: BorderRadius.circular(2),
+                    ),
                   ),
-                  padding: EdgeInsets.all(16),
-                  child: Text(
-                    'Мне понравился врач . Сразу запросил доступ к моей медкарте и на этом мы сэкономили время, учитывая, что сама консультация стоит недешево. Диагноз поставил предварительный . В целом, буду теперь консультироваться у него периодически в целях профилактики.',
-                    style: TextStyle(color: Colors.black54),
+                  
+                  // Звездочки для рейтинга
+                  Row(
+                    mainAxisAlignment: MainAxisAlignment.center,
+                    children: List.generate(5, (index) {
+                      return GestureDetector(
+                        onTap: () {
+                          setState(() {
+                            _selectedRating = index + 1;
+                          });
+                        },
+                        child: Icon(
+                          Icons.star,
+                          color: index < _selectedRating 
+                              ? Colors.yellow[700] 
+                              : Colors.grey[300],
+                          size: 28,
+                        ),
+                      );
+                    }),
                   ),
-                ),
-              ),
-              
-              // Секция для файлов
-              Padding(
-                padding: EdgeInsets.symmetric(horizontal: 24),
-                child: Row(
-                  children: [
-                    Column(
-                      crossAxisAlignment: CrossAxisAlignment.center,
-                      children: [
-                        Container(
-                          width: 40,
-                          height: 40,
-                          decoration: BoxDecoration(
-                            color: Color.fromRGBO(228, 240, 255, 1),
-                            borderRadius: BorderRadius.circular(20),
-                          ),
-                          child: Icon(Icons.add, color: Colors.blue),
+                  
+                  // Текст вопроса (обновлен для врача)
+                  Padding(
+                    padding: EdgeInsets.symmetric(horizontal: 24, vertical: 14),
+                    child: Text(
+                      'Как прошел онлайн прием с пациентом?',
+                      style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
+                    ),
+                  ),
+                  
+                  // Подсказка о количестве символов
+                  Padding(
+                    padding: EdgeInsets.symmetric(horizontal: 24),
+                    child: Text(
+                      'не более 250 символов',
+                      style: TextStyle(fontSize: 12, color: Colors.grey[600]),
+                    ),
+                  ),
+                  
+                  // Поле для ввода отзыва
+                  Padding(
+                    padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
+                    child: Container(
+                      decoration: BoxDecoration(
+                        color: Color.fromRGBO(244, 248, 255, 1),
+                        borderRadius: BorderRadius.circular(16),
+                      ),
+                      padding: EdgeInsets.all(16),
+                      child: TextField(
+                        controller: _reviewController,
+                        maxLines: 4,
+                        maxLength: 250,
+                        decoration: InputDecoration(
+                          hintText: 'Напишите ваш отзыв о пациенте здесь...',
+                          border: InputBorder.none,
+                          counterText: '',
                         ),
-                        SizedBox(height: 4),
-                        Text(
-                          'Добавить файл',
-                          style: TextStyle(fontSize: 10),
+                        style: TextStyle(color: Colors.black87),
+                      ),
+                    ),
+                  ),
+                  
+                  // Секция для файлов
+                  Padding(
+                    padding: EdgeInsets.symmetric(horizontal: 24),
+                    child: Row(
+                      children: [
+                        Column(
+                          crossAxisAlignment: CrossAxisAlignment.center,
+                          children: [
+                            Container(
+                              width: 40,
+                              height: 40,
+                              decoration: BoxDecoration(
+                                color: Color.fromRGBO(228, 240, 255, 1),
+                                borderRadius: BorderRadius.circular(20),
+                              ),
+                              child: Icon(Icons.add, color: Colors.blue),
+                            ),
+                            SizedBox(height: 4),
+                            Text(
+                              'Добавить файл',
+                              style: TextStyle(fontSize: 10),
+                            ),
+                          ],
                         ),
+                        Expanded(child: Container()),
                       ],
                     ),
-                    Expanded(child: Container()), // Пространство для будущих файлов
-                  ],
-                ),
-              ),
-              
-              // Кнопка отправки отзыва
-              Padding(
-                padding: EdgeInsets.all(24),
-                child: CustomButton(
-                 
-                  width: double.infinity,
-                  text: "Оставить отзыв",
-                  variant: ButtonVariant.FillBlueA400,
-                  fontStyle: ButtonFontStyle.SourceSansProSemiBold18,
-                  alignment: Alignment.center,
-                  onPressed: () {
-                    Navigator.pop(context);
-                    _showReviewSuccessDialog(context);
-                  },
-                ),
+                  ),
+                  
+                  // Кнопка отправки отзыва
+                  Padding(
+                    padding: EdgeInsets.all(24),
+                    child: _isSubmitting
+                        ? CircularProgressIndicator()
+                        : CustomButton(
+                            width: double.infinity,
+                            text: "Оставить отзыв",
+                            variant: ButtonVariant.FillBlueA400,
+                            fontStyle: ButtonFontStyle.SourceSansProSemiBold18,
+                            alignment: Alignment.center,
+                            onPressed: () async {
+                              if (_reviewController.text.isEmpty) {
+                                ScaffoldMessenger.of(context).showSnackBar(
+                                  SnackBar(content: Text('Пожалуйста, напишите отзыв')),
+                                );
+                                return;
+                              }
+                              
+                              setState(() {
+                                _isSubmitting = true;
+                              });
+                              
+                              // Получаем реальный ID пациента из выбранной записи
+                              String patientId = context.selectedAppointment['patient']?['user_id']?.toString() ?? '';
+                              
+                              if (patientId.isEmpty) {
+                                ScaffoldMessenger.of(context).showSnackBar(
+                                  SnackBar(content: Text('Не удалось получить данные пациента')),
+                                );
+                                return;
+                              }
+                              
+                              bool success = await createDoctorReview(
+                                patientId: patientId,
+                                rating: _selectedRating,
+                                review: _reviewController.text,
+                              );
+                              
+                              setState(() {
+                                _isSubmitting = false;
+                              });
+                              
+                              if (success) {
+                                Navigator.pop(context);
+                                _showReviewSuccessDialog(context);
+                              } else {
+                                ScaffoldMessenger.of(context).showSnackBar(
+                                  SnackBar(content: Text('Ошибка при отправке отзыва')),
+                                );
+                              }
+                            },
+                          ),
+                  ),
+                ],
               ),
-            ],
-          ),
+            );
+          },
         );
       },
     );
@@ -539,4 +619,4 @@ color: Color.fromARGB(255, 91, 91, 91),
       },
     );
   }
-}
\ No newline at end of file
+}
diff --git a/lib/screens/online_reception_chat_start.dart b/lib/screens/online_reception_chat_start.dart
index edd345e..57cd56a 100644
--- a/lib/screens/online_reception_chat_start.dart
+++ b/lib/screens/online_reception_chat_start.dart
@@ -1,5 +1,6 @@
 import 'package:doctorq/screens/articles/articles.dart';
 import 'package:doctorq/screens/online_reception_chat_complete.dart';
+import 'package:doctorq/extensions.dart';
 import 'package:flutter/material.dart';
 
 class OnlineReceptionChatStart extends StatefulWidget {
@@ -69,23 +70,25 @@ class _OnlineReceptionChatStartState extends State<OnlineReceptionChatStart> {
                 children: [
                   CircleAvatar(
                     radius: 30,
-                    backgroundImage: AssetImage('assets/images/11.png'),
+                    backgroundImage: context.selectedAppointment['patient']?['profile_image'] != null
+                        ? NetworkImage(context.selectedAppointment['patient']?['profile_image'])
+                        : AssetImage('assets/images/11.png') as ImageProvider,
                   ),
                   const SizedBox(width: 12),
                   // Информация о враче
                   Expanded(
                     child: Column(
                       crossAxisAlignment: CrossAxisAlignment.start,
-                      children: [
-                       const Text(
-                                        'Парфенова К.С.',
+                                      children: [
+                                       Text(
+                                        '${context.selectedAppointment['patient']?['first_name'] ?? ''} ${context.selectedAppointment['patient']?['last_name'] ?? ''}',
                                         style: TextStyle(
                                           fontSize: 14,
                                           fontWeight: FontWeight.bold,
                                         ),
                                       ),
-                         const Text(
-                                        'Женщина, 71',
+                         Text(
+                                        '${context.selectedAppointment['patient']?['gender'] ?? 'Не указан'}, ${context.selectedAppointment['patient']?['age'] ?? 'Не указан'}',
                                         style: TextStyle(
                                          fontSize: 12 
                                         ),),
@@ -202,4 +205,4 @@ color: Color.fromARGB(255, 91, 91, 91),
       ),
     );
   }
-}
\ No newline at end of file
+}
diff --git a/lib/screens/online_reception_video.dart b/lib/screens/online_reception_video.dart
index 496e359..8d18cea 100644
--- a/lib/screens/online_reception_video.dart
+++ b/lib/screens/online_reception_video.dart
@@ -1,5 +1,6 @@
 import 'package:doctorq/screens/articles/articles.dart';
 import 'package:doctorq/screens/online_reception_video_start.dart';
+import 'package:doctorq/extensions.dart';
 import 'package:flutter/material.dart';
 
 class OnlineReceptionVideo extends StatelessWidget {
@@ -124,8 +125,8 @@ Container(
                                           Expanded(
                                             flex: 3,
                                             child: Container(
-                                              child: const Text(
-                                                '26.01.25',
+                                              child: Text(
+                                                context.selectedAppointment['date'] ?? '26.01.25',
                                                 style: TextStyle(
                                                   fontWeight: FontWeight.bold,
                                                   color: Color.fromARGB(
@@ -185,8 +186,8 @@ Container(
                                           Expanded(
                                             flex: 3,
                                             child: Container(
-                                              child: const Text(
-                                                '14:00',
+                                              child: Text(
+                                                context.selectedAppointment['from_time'] ?? '14:00',
                                                 style: TextStyle(
                                                   fontWeight: FontWeight.bold,
                                                   color: Color.fromARGB(
@@ -209,8 +210,9 @@ SizedBox(height: 20),
                               children: [
                                 CircleAvatar(
                                   radius: 30,
-                                  backgroundImage:
-                                      AssetImage('assets/images/11.png'),
+                                  backgroundImage: context.selectedAppointment['doctor']?['profile_image'] != null
+                                      ? NetworkImage(context.selectedAppointment['doctor']?['profile_image'])
+                                      : AssetImage('assets/images/11.png') as ImageProvider,
                                 ),
                                 const SizedBox(width: 16),
                                 Expanded(
@@ -218,15 +220,15 @@ SizedBox(height: 20),
                                     crossAxisAlignment:
                                         CrossAxisAlignment.start,
                                     children: [
-                                      const Text(
-                                         'Трофимова Е.С.',
+                                      Text(
+                                        '${context.selectedAppointment['doctor']?['first_name'] ?? ''} ${context.selectedAppointment['doctor']?['last_name'] ?? ''}',
                                         style: TextStyle(
                                           fontSize: 14,
                                           fontWeight: FontWeight.bold,
                                         ),
                                       ),
-                                      const Text(
-                                        'Психотерапевт',
+                                      Text(
+                                        context.selectedAppointment['doctor']?['specialization'] ?? 'Врач',
                                         style: TextStyle(
                                          fontSize: 12 
                                         )),
@@ -249,7 +251,7 @@ color: Color.fromARGB(255, 0, 0, 0),
 ),
 const SizedBox(width: 4),
 Text(
-'45 мин',
+'${context.calculateDuration(context.selectedAppointment['from_time'], context.selectedAppointment['to_time'])} мин',
 style: TextStyle(
 fontSize: 11,
 color: Color.fromARGB(255, 0, 0, 0),
@@ -464,4 +466,4 @@ Row(
               );
         
   }
-}
\ No newline at end of file
+}
diff --git a/lib/screens/online_reception_video_complete.dart b/lib/screens/online_reception_video_complete.dart
index 028aacb..fec424d 100644
--- a/lib/screens/online_reception_video_complete.dart
+++ b/lib/screens/online_reception_video_complete.dart
@@ -6,6 +6,7 @@ import 'package:doctorq/screens/appointments/book_screen/book_screen.dart';
 import 'package:doctorq/screens/appointments/steps/step_2_filled_screen/step_2_filled_screen.dart';
 import 'package:doctorq/screens/home/home_screen/home_screen.dart';
 import 'package:doctorq/services/auth_service.dart';
+import 'package:doctorq/services/api_service.dart';
 import 'package:doctorq/widgets/top_back.dart';
 import '../../../../widgets/spacing.dart';
 import 'package:doctorq/app_export.dart';
@@ -82,6 +83,15 @@ class OnlineReceptionVideoComplete extends StatefulWidget {
 }
 
 class _AppointmentsStep3FilledScreenState extends State<OnlineReceptionVideoComplete> {
+  int _selectedRating = 5;
+  final TextEditingController _reviewController = TextEditingController();
+  bool _isSubmitting = false;
+
+  @override
+  void dispose() {
+    _reviewController.dispose();
+    super.dispose();
+  }
   @override
   Widget build(BuildContext context) {
     bool isDark = Theme.of(context).brightness == Brightness.dark;
@@ -162,7 +172,7 @@ class _AppointmentsStep3FilledScreenState extends State<OnlineReceptionVideoComp
             crossAxisAlignment: CrossAxisAlignment.center,
                                 children: [ 
                                   Text(
-                                    'Чат с врачом успешно завершен',
+                                    'Видео с пациентом успешно завершено',
                                     style: TextStyle(
                                       color:
                                           const Color.fromARGB(255, 17, 17, 17),
@@ -194,8 +204,9 @@ const SizedBox(width: 8),
                                 children: [
                                   CircleAvatar(
                                     radius: 30,
-                                    backgroundImage:
-                                        AssetImage('assets/images/11.png'),
+                                    backgroundImage: context.selectedAppointment['patient']?['profile_image'] != null
+                                        ? NetworkImage(context.selectedAppointment['patient']?['profile_image'])
+                                        : AssetImage('assets/images/11.png') as ImageProvider,
                                   ),
                                   const SizedBox(width: 16),
                                   Expanded(
@@ -203,17 +214,21 @@ const SizedBox(width: 8),
                                       crossAxisAlignment:
                                           CrossAxisAlignment.start,
                                       children: [
-                                        const Text('Трофимова Е.С.',
-                                            style: TextStyle(
-                                                fontWeight: FontWeight.bold)),
-                                        const Text('Психотерапевт'),
-                                        const Text(
-'О враче    Был в сети 1 мин назад',
-style: TextStyle(
-fontSize: 10,
-color: Color.fromARGB(255, 91, 91, 91),
-),
-),
+                                        Text(
+                                          '${context.selectedAppointment['patient']?['first_name'] ?? ''} ${context.selectedAppointment['patient']?['last_name'] ?? ''}',
+                                          style: TextStyle(
+                                              fontWeight: FontWeight.bold)
+                                        ),
+                                        /* Text(
+                                          '${context.selectedAppointment['patient']?['gender'] ?? 'Не указан'}, ${context.selectedAppointment['patient']?['age'] ?? 'Не указан'}',
+                                        ),
+                                        Text(
+                                          'О пациенте    Был(а) в сети недавно',
+                                          style: TextStyle(
+                                            fontSize: 10,
+                                            color: Color.fromARGB(255, 91, 91, 91),
+                                          ),
+                                        ), */
                                       ],
                                     ),
                                   ),
@@ -380,115 +395,179 @@ color: Color.fromARGB(255, 91, 91, 91),
       barrierColor: Colors.black.withOpacity(0.5),
       isScrollControlled: true,
       builder: (BuildContext context) {
-        return Container(
-          height: MediaQuery.of(context).size.height * 0.75,
-          decoration: BoxDecoration(
-            color: Colors.white,
-            borderRadius: BorderRadius.only(
-              topLeft: Radius.circular(24),
-              topRight: Radius.circular(24),
-            ),
-          ),
-          child: Column(
-            children: [
-              // Стрелка для свайпа вниз
-              Container(
-                height: 4,
-                width: 40,
-                margin: EdgeInsets.only(top: 8, bottom: 16),
-                decoration: BoxDecoration(
-                  color: Colors.grey[300],
-                  borderRadius: BorderRadius.circular(2),
-                ),
-              ),
-              
-              // Звездочки
-              Row(
-                mainAxisAlignment: MainAxisAlignment.center,
-                children: List.generate(5, (_) => Icon(Icons.star, color: Colors.yellow[700], size: 28)),
-              ),
-              
-              // Текст вопроса
-              Padding(
-                padding: EdgeInsets.symmetric(horizontal: 24,vertical: 14),
-                child: Text(
-                  'Как прошел ваш онлайн прием с врачом?',
-                  style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
+        return StatefulBuilder(
+          builder: (BuildContext context, StateSetter setState) {
+            return Container(
+              height: MediaQuery.of(context).size.height * 0.75,
+              decoration: BoxDecoration(
+                color: Colors.white,
+                borderRadius: BorderRadius.only(
+                  topLeft: Radius.circular(24),
+                  topRight: Radius.circular(24),
                 ),
               ),
-              
-              // Подсказка о количестве символов
-              Padding(
-                padding: EdgeInsets.symmetric(horizontal: 24),
-                child: Text(
-                  'не более 250 символов',
-                  style: TextStyle(fontSize: 12, color: Colors.grey[600]),
-                ),
-              ),
-              
-              // Контейнер с отзывом
-              Padding(
-                padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
-                child: Container(
-                  decoration: BoxDecoration(
-                    color: Color.fromRGBO(244, 248, 255, 1),
-                    borderRadius: BorderRadius.circular(16),
+              child: Column(
+                children: [
+                  // Стрелка для свайпа вниз
+                  Container(
+                    height: 4,
+                    width: 40,
+                    margin: EdgeInsets.only(top: 8, bottom: 16),
+                    decoration: BoxDecoration(
+                      color: Colors.grey[300],
+                      borderRadius: BorderRadius.circular(2),
+                    ),
                   ),
-                  padding: EdgeInsets.all(16),
-                  child: Text(
-                    'Мне понравился врач . Сразу запросил доступ к моей медкарте и на этом мы сэкономили время, учитывая, что сама консультация стоит недешево. Диагноз поставил предварительный . В целом, буду теперь консультироваться у него периодически в целях профилактики.',
-                    style: TextStyle(color: Colors.black54),
+                  
+                  // Звездочки для рейтинга
+                  Row(
+                    mainAxisAlignment: MainAxisAlignment.center,
+                    children: List.generate(5, (index) {
+                      return GestureDetector(
+                        onTap: () {
+                          setState(() {
+                            _selectedRating = index + 1;
+                          });
+                        },
+                        child: Icon(
+                          Icons.star,
+                          color: index < _selectedRating 
+                              ? Colors.yellow[700] 
+                              : Colors.grey[300],
+                          size: 28,
+                        ),
+                      );
+                    }),
                   ),
-                ),
-              ),
-              
-              // Секция для файлов
-              Padding(
-                padding: EdgeInsets.symmetric(horizontal: 24),
-                child: Row(
-                  children: [
-                    Column(
-                      crossAxisAlignment: CrossAxisAlignment.center,
-                      children: [
-                        Container(
-                          width: 40,
-                          height: 40,
-                          decoration: BoxDecoration(
-                            color: Color.fromRGBO(228, 240, 255, 1),
-                            borderRadius: BorderRadius.circular(20),
-                          ),
-                          child: Icon(Icons.add, color: Colors.blue),
+                  
+                  // Текст вопроса (обновлен для врача)
+                  Padding(
+                    padding: EdgeInsets.symmetric(horizontal: 24, vertical: 14),
+                    child: Text(
+                      'Как прошел онлайн прием с пациентом?',
+                      style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
+                    ),
+                  ),
+                  
+                  // Подсказка о количестве символов
+                  Padding(
+                    padding: EdgeInsets.symmetric(horizontal: 24),
+                    child: Text(
+                      'не более 250 символов',
+                      style: TextStyle(fontSize: 12, color: Colors.grey[600]),
+                    ),
+                  ),
+                  
+                  // Поле для ввода отзыва
+                  Padding(
+                    padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
+                    child: Container(
+                      decoration: BoxDecoration(
+                        color: Color.fromRGBO(244, 248, 255, 1),
+                        borderRadius: BorderRadius.circular(16),
+                      ),
+                      padding: EdgeInsets.all(16),
+                      child: TextField(
+                        controller: _reviewController,
+                        maxLines: 4,
+                        maxLength: 250,
+                        decoration: InputDecoration(
+                          hintText: 'Напишите ваш отзыв о пациенте здесь...',
+                          border: InputBorder.none,
+                          counterText: '',
                         ),
-                        SizedBox(height: 4),
-                        Text(
-                          'Добавить файл',
-                          style: TextStyle(fontSize: 10),
+                        style: TextStyle(color: Colors.black87),
+                      ),
+                    ),
+                  ),
+                  
+                  // Секция для файлов
+                  Padding(
+                    padding: EdgeInsets.symmetric(horizontal: 24),
+                    child: Row(
+                      children: [
+                        Column(
+                          crossAxisAlignment: CrossAxisAlignment.center,
+                          children: [
+                            Container(
+                              width: 40,
+                              height: 40,
+                              decoration: BoxDecoration(
+                                color: Color.fromRGBO(228, 240, 255, 1),
+                                borderRadius: BorderRadius.circular(20),
+                              ),
+                              child: Icon(Icons.add, color: Colors.blue),
+                            ),
+                            SizedBox(height: 4),
+                            Text(
+                              'Добавить файл',
+                              style: TextStyle(fontSize: 10),
+                            ),
+                          ],
                         ),
+                        Expanded(child: Container()),
                       ],
                     ),
-                    Expanded(child: Container()), // Пространство для будущих файлов
-                  ],
-                ),
-              ),
-              
-              // Кнопка отправки отзыва
-              Padding(
-                padding: EdgeInsets.all(24),
-                child: CustomButton(
-                 
-                  width: double.infinity,
-                  text: "Оставить отзыв",
-                  variant: ButtonVariant.FillBlueA400,
-                  fontStyle: ButtonFontStyle.SourceSansProSemiBold18,
-                  alignment: Alignment.center,
-                  onPressed: () {
-                    Navigator.pop(context);
-                    _showReviewSuccessDialog(context);
-                  },
-                ),
+                  ),
+                  
+                  // Кнопка отправки отзыва
+                  Padding(
+                    padding: EdgeInsets.all(24),
+                    child: _isSubmitting
+                        ? CircularProgressIndicator()
+                        : CustomButton(
+                            width: double.infinity,
+                            text: "Оставить отзыв",
+                            variant: ButtonVariant.FillBlueA400,
+                            fontStyle: ButtonFontStyle.SourceSansProSemiBold18,
+                            alignment: Alignment.center,
+                            onPressed: () async {
+                              if (_reviewController.text.isEmpty) {
+                                ScaffoldMessenger.of(context).showSnackBar(
+                                  SnackBar(content: Text('Пожалуйста, напишите отзыв')),
+                                );
+                                return;
+                              }
+                              
+                              setState(() {
+                                _isSubmitting = true;
+                              });
+                              
+                              // Получаем реальный ID пациента из выбранной записи
+                              String patientId = context.selectedAppointment['patient']?['user_id']?.toString() ?? '';
+                              
+                              if (patientId.isEmpty) {
+                                ScaffoldMessenger.of(context).showSnackBar(
+                                  SnackBar(content: Text('Не удалось получить данные пациента')),
+                                );
+                                return;
+                              }
+                              
+                              bool success = await createDoctorReview(
+                                patientId: patientId,
+                                rating: _selectedRating,
+                                review: _reviewController.text,
+                              );
+                              
+                              setState(() {
+                                _isSubmitting = false;
+                              });
+                              
+                              if (success) {
+                                Navigator.pop(context);
+                                _showReviewSuccessDialog(context);
+                              } else {
+                                ScaffoldMessenger.of(context).showSnackBar(
+                                  SnackBar(content: Text('Ошибка при отправке отзыва')),
+                                );
+                              }
+                            },
+                          ),
+                  ),
+                ],
               ),
-            ],
-          ),
+            );
+          },
         );
       },
     );
@@ -538,4 +617,4 @@ color: Color.fromARGB(255, 91, 91, 91),
       },
     );
   }
-}
\ No newline at end of file
+}
diff --git a/lib/screens/online_reception_video_start.dart b/lib/screens/online_reception_video_start.dart
index 2b1f6b4..e0bbb9e 100644
--- a/lib/screens/online_reception_video_start.dart
+++ b/lib/screens/online_reception_video_start.dart
@@ -1,6 +1,7 @@
 import 'package:doctorq/screens/articles/articles.dart';
 import 'package:doctorq/screens/online_reception_video_complete.dart';
 import 'package:doctorq/screens/online_reception_video_start_two.dart';
+import 'package:doctorq/extensions.dart';
 import 'package:flutter/material.dart';
 
 class OnlineReceptionVideoStart extends StatefulWidget {
@@ -18,7 +19,7 @@ class _OnlineReceptionVideoStartState extends State<OnlineReceptionVideoStart> {
   Widget build(BuildContext context) {
     return Scaffold(
       appBar: AppBar(
-        title: const Text('Видео с врачом'),
+        title: const Text('Видео с пациентом'),
       ),
       body: SafeArea(
         child: Column(
@@ -53,19 +54,20 @@ class _OnlineReceptionVideoStartState extends State<OnlineReceptionVideoStart> {
                                     children: [
                                       CircleAvatar(
                                   radius: 30,
-                                  backgroundImage:
-                                      AssetImage('assets/images/11.png'),
+                                  backgroundImage: context.selectedAppointment['doctor']?['profile_image'] != null
+                                      ? NetworkImage(context.selectedAppointment['doctor']?['profile_image'])
+                                      : AssetImage('assets/images/11.png') as ImageProvider,
                                 ),
                                 const SizedBox(width: 16),
-                                      const Text(
-                                         'Трофимова Е.С.',
+                                      Text(
+                                        '${context.selectedAppointment['doctor']?['first_name'] ?? ''} ${context.selectedAppointment['doctor']?['last_name'] ?? ''}',
                                         style: TextStyle(
                                           fontSize: 14,
                                           fontWeight: FontWeight.bold,
                                         ),
                                       ),
-                                      const Text(
-                                        'Психотерапевт',
+                                      Text(
+                                        context.selectedAppointment['doctor']?['specialization'] ?? 'Врач',
                                         style: TextStyle(
                                           color: Color.fromARGB(255, 136, 136, 136),
                                          fontSize: 12 
@@ -179,4 +181,4 @@ const SizedBox(height: 4), // Добавляем отступ между стр
       ),
     );
   }
-}
\ No newline at end of file
+}
diff --git a/lib/screens/online_reception_video_start_two.dart b/lib/screens/online_reception_video_start_two.dart
index 70d3b6f..7d76c7d 100644
--- a/lib/screens/online_reception_video_start_two.dart
+++ b/lib/screens/online_reception_video_start_two.dart
@@ -1,5 +1,6 @@
 import 'package:doctorq/screens/articles/articles.dart';
 import 'package:doctorq/screens/online_reception_video_complete.dart';
+import 'package:doctorq/extensions.dart';
 import 'package:flutter/material.dart';
 
 class OnlineReceptionVideoStartTwo extends StatefulWidget {
@@ -18,7 +19,7 @@ class _OnlineReceptionVideoStartTwoState
   Widget build(BuildContext context) {
     return Scaffold(
       appBar: AppBar(
-        title: const Text('Видео с врачом'),
+        title: const Text('Видео с пациентом'),
       ),
       body: SafeArea(
         child: Column(
@@ -46,14 +47,14 @@ class _OnlineReceptionVideoStartTwoState
                                 child: Row(
                                   crossAxisAlignment: CrossAxisAlignment.start,
                                   children: [
-                                    const Text(
-                                      'Трофимова Е.С.',
+                                    Text(
+                                      '${context.selectedAppointment['doctor']?['first_name'] ?? ''} ${context.selectedAppointment['doctor']?['last_name'] ?? ''}',
                                       style: TextStyle(
                                         fontSize: 14,
                                         fontWeight: FontWeight.bold,
                                       ),
                                     ),
-                                    const Text('    Психотерапевт',
+                                    Text('    ${context.selectedAppointment['doctor']?['specialization'] ?? 'Врач'}',
                                         style: TextStyle(
                                             color: Color.fromARGB(
                                                 255, 136, 136, 136),
@@ -250,4 +251,4 @@ class _OnlineReceptionVideoStartTwoState
       ),
     );
   }
-}
\ No newline at end of file
+}
diff --git a/lib/screens/profile/akk_information.dart b/lib/screens/profile/akk_information.dart
index 0d557dc..b99ed37 100644
--- a/lib/screens/profile/akk_information.dart
+++ b/lib/screens/profile/akk_information.dart
@@ -11,6 +11,7 @@ import 'package:doctorq/utils/size_utils.dart';
 import 'package:doctorq/widgets/custom_button.dart';
 import 'package:doctorq/widgets/top_back.dart';
 import 'package:flutter/material.dart';
+import 'package:doctorq/extensions.dart';
 
 class CustomButton extends StatelessWidget {
   final VoidCallback? onPressed;
@@ -100,6 +101,10 @@ class _AkkInfoScreenState extends State<AkkInfoScreen> {
                     decoration: BoxDecoration(
                       color: const Color.fromARGB(255, 255, 255, 255)
                           .withOpacity(0.95),
+                          borderRadius: BorderRadius.only(
+      topLeft: Radius.circular(22), // Скругление верхнего левого угла
+      topRight: Radius.circular(22), // Скругление верхнего правого угла
+    ),
                     ),
                     child: Column(
                       mainAxisSize: MainAxisSize.min,
@@ -138,8 +143,8 @@ class _AkkInfoScreenState extends State<AkkInfoScreen> {
                           ),
                           child: Row(
                             children: [
-                              const Text(
-                                'Симонова Алла Витальевна',
+                              Text(
+                                '${context.userData['first_name'] ?? ''} ${context.userData['last_name'] ?? ''}',
                                 style: TextStyle(
                                   fontSize: 14,
                                   color: Colors.black,
@@ -215,85 +220,8 @@ class _AkkInfoScreenState extends State<AkkInfoScreen> {
                           ),
                           child: Row(
                             children: [
-                              const Text(
-                                '+7 916 123 45 67',
-                                style: TextStyle(
-                                  fontSize: 14,
-                                  color: Colors.black,
-                                ),
-                              ),
-                              const Spacer(),
-                              Stack(
-                                alignment: Alignment.center,
-                                children: [
-                                  Container(
-                                    width: 24,
-                                    height: 24,
-                                    decoration: BoxDecoration(
-                                      color: Colors.white,
-                                      shape: BoxShape.circle,
-                                    ),
-                                  ),
-                                  Icon(
-                                    Icons.create,
-                                    color: Colors.black,
-                                    size: 16,
-                                  ),
-                                ],
-                              ),
-                            ],
-                          ),
-                        ),
-                      ],
-                    ),
-                  ),
-                  Container(
-                    width: double.infinity,
-                    padding: const EdgeInsets.symmetric(
-                        horizontal: 16, vertical: 12),
-                    decoration: BoxDecoration(
-                      color: const Color.fromARGB(255, 255, 255, 255)
-                          .withOpacity(0.95),
-                    ),
-                    child: Column(
-                      mainAxisSize: MainAxisSize.min,
-                      crossAxisAlignment: CrossAxisAlignment.start,
-                      children: [
-                        Container(
-                          padding: const EdgeInsets.symmetric(
-                            horizontal: 8,
-                            vertical: 2,
-                          ),
-                          decoration: BoxDecoration(
-                            color: const Color.fromARGB(255, 255, 255, 255),
-                            borderRadius: BorderRadius.circular(20.0),
-                          ),
-                          child: Row(
-                            children: [
-                              const Text(
-                                'Город',
-                                style: TextStyle(
-                                  fontSize: 12,
-                                  color: Color.fromARGB(255, 70, 70, 70),
-                                ),
-                              ),
-                            ],
-                          ),
-                        ),
-                        Container(
-                          height: 46,
-                          padding: const EdgeInsets.symmetric(
-                            horizontal: 8,
-                            vertical: 2,
-                          ),
-                          decoration: BoxDecoration(
-                            color: const Color(0xFFF4F8FF),
-                            borderRadius: BorderRadius.circular(20.0),
-                          ),
-                          child: Row(
-                            children: [
-                              const Text(
-                                'Санкт-Петербург',
+                              Text(
+                                context.userData['phone'] ?? 'Номер не указан',
                                 style: TextStyle(
                                   fontSize: 14,
                                   color: Colors.black,
@@ -369,8 +297,8 @@ class _AkkInfoScreenState extends State<AkkInfoScreen> {
                           ),
                           child: Row(
                             children: [
-                              const Text(
-                                'Start782@yandex.ru',
+                              Text(
+                                context.userData['email'] ?? 'Email не указан',
                                 style: TextStyle(
                                   fontSize: 14,
                                   color: Colors.black,
@@ -446,8 +374,8 @@ class _AkkInfoScreenState extends State<AkkInfoScreen> {
                           ),
                           child: Row(
                             children: [
-                              const Text(
-                                '142-667-877 31',
+                              Text(
+                                context.userData['snils'] ?? 'СНИЛС не указан',
                                 style: TextStyle(
                                   fontSize: 14,
                                   color: Colors.black,
@@ -534,6 +462,10 @@ class _AkkInfoScreenState extends State<AkkInfoScreen> {
                       decoration: BoxDecoration(
                         color: const Color.fromARGB(255, 255, 255, 255)
                             .withOpacity(0.95),
+                            borderRadius: BorderRadius.only(
+      bottomLeft: Radius.circular(22), // Скругление нижнего левого угла
+      bottomRight: Radius.circular(22), // Скругление нижнего правого угла
+    ),
                       ),
                       child: Container(
                         padding: const EdgeInsets.symmetric(
diff --git a/lib/screens/profile/edit_profile_information.dart b/lib/screens/profile/edit_profile_information.dart
index 4251831..f908dad 100644
--- a/lib/screens/profile/edit_profile_information.dart
+++ b/lib/screens/profile/edit_profile_information.dart
@@ -4,6 +4,10 @@ import 'package:doctorq/utils/size_utils.dart';
 import 'package:doctorq/widgets/spacing.dart';
 import 'package:doctorq/widgets/top_back.dart';
 import 'package:flutter/material.dart';
+import 'package:graphql/client.dart';
+import 'package:doctorq/constant/constants.dart';
+import 'package:get_it/get_it.dart';
+import 'package:doctorq/stores/user_store.dart';
 
 class AkkEditScreen extends StatefulWidget {
   const AkkEditScreen({Key? key}) : super(key: key);
@@ -14,6 +18,112 @@ class AkkEditScreen extends StatefulWidget {
 
 class _AkkInfoScreenState extends State<AkkEditScreen> {
   bool isChecked = false;
+  bool isLoading = false;
+  
+  // Controllers for editable fields
+  late TextEditingController _firstNameController;
+  late TextEditingController _lastNameController;
+  late TextEditingController _phoneController;
+  late TextEditingController _birthDateController;
+  late TextEditingController _emailController;
+  late TextEditingController _snilsController;
+
+  @override
+  void initState() {
+    super.initState();
+    
+    // Initialize controllers with current user data
+    final userData = context.userData;
+    _firstNameController = TextEditingController(text: userData['first_name'] ?? '');
+    _lastNameController = TextEditingController(text: userData['last_name'] ?? '');
+    _phoneController = TextEditingController(text: userData['phone'] ?? '');
+    _birthDateController = TextEditingController(text: userData['birth_date'] ?? '');
+    _emailController = TextEditingController(text: userData['email'] ?? '');
+    _snilsController = TextEditingController(text: userData['snils'] ?? '');
+  }
+
+  @override
+  void dispose() {
+    _firstNameController.dispose();
+    _lastNameController.dispose();
+    _phoneController.dispose();
+    _birthDateController.dispose();
+    _emailController.dispose();
+    _snilsController.dispose();
+    super.dispose();
+  }
+
+  Future<void> _saveProfile() async {
+    setState(() {
+      isLoading = true;
+    });
+
+    try {
+      final mutation = '''
+       mutation UpdateUserProfile(\$input: UpdateUserProfileInput!) {
+            updateUserProfile(input: \$input) {
+              user {
+                id
+                first_name
+                last_name
+                email
+                contact
+                dob
+                snils
+              }
+              status
+            }
+          }
+      ''';
+
+      final variables = {
+        'input': {
+          'user_id': context.userData['user_id']?.toString() ?? '',
+          'first_name': _firstNameController.text,
+          'last_name': _lastNameController.text,
+        //  'email': _emailController.text,
+          'phone': _phoneController.text,
+          'birth_date': _birthDateController.text,
+          'snils': _snilsController.text,
+        }
+      };
+
+      final MutationOptions options = MutationOptions(
+        document: gql(mutation),
+        variables: variables,
+      );
+      
+      GraphQLClient graphqlClient = await graphqlAPI2.authClient();
+      final QueryResult result = await graphqlClient.mutate(options);
+      
+      if (result.hasException) {
+        throw result.exception!;
+      }
+
+      // Update local user data context
+      final updatedData = Map<String, dynamic>.from(context.userData);
+      updatedData.addAll(variables['input']!);
+      
+      // Update user data in store
+      final userStore = GetIt.instance<UserStore>();
+      userStore.setUserData(updatedData);
+
+      ScaffoldMessenger.of(context).showSnackBar(
+        SnackBar(content: Text('Профиль успешно обновлен')),
+      );
+
+      Navigator.pop(context);
+      
+    } catch (e) {
+      ScaffoldMessenger.of(context).showSnackBar(
+        SnackBar(content: Text('Ошибка при обновлении профиля: $e')),
+      );
+    } finally {
+      setState(() {
+        isLoading = false;
+      });
+    }
+  }
 
   @override
   Widget build(BuildContext context) {
@@ -26,414 +136,137 @@ class _AkkInfoScreenState extends State<AkkEditScreen> {
               margin: const EdgeInsets.only(bottom: 4),
               padding: const EdgeInsets.all(4),
               decoration: BoxDecoration(
-                color:
-                    const Color.fromARGB(255, 236, 236, 236).withOpacity(0.95),
+                color: const Color.fromARGB(255, 236, 236, 236).withOpacity(0.95),
                 border: Border(top: BorderSide(color: Colors.grey.shade300)),
               ),
               child: ListView(
-                padding:
-                    const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
+                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                 children: [
+                  // Profile header
                   Container(
                     width: double.infinity,
-                    padding: const EdgeInsets.symmetric(
-                        horizontal: 16, vertical: 12),
+                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                     decoration: BoxDecoration(
-                      color: const Color.fromARGB(255, 255, 255, 255)
-                          .withOpacity(0.95),
+                      color: const Color.fromARGB(255, 255, 255, 255).withOpacity(0.95),
+                      borderRadius: BorderRadius.only(
+                        topLeft: Radius.circular(22),
+                        topRight: Radius.circular(22),
+                      ),
                     ),
-                    child: Column(
+                    child: Row(
+                      crossAxisAlignment: CrossAxisAlignment.center,
+                      mainAxisAlignment: MainAxisAlignment.start,
                       mainAxisSize: MainAxisSize.min,
-                      crossAxisAlignment: CrossAxisAlignment.start,
                       children: [
-
-Row(
-                        crossAxisAlignment: CrossAxisAlignment.center,
-                        mainAxisAlignment: MainAxisAlignment.start,
-                        mainAxisSize: MainAxisSize.min,
-                        children: [
-                          CircleAvatar(
-                            radius: getVerticalSize(25),
-                            backgroundImage:
-                                NetworkImage(context.userData['photo']),
-                          ),
-
-                          HorizontalSpace(width: 20),
-
-                          //child: FittedBox(
-                          GestureDetector(
-                              onTap: () {
-                                Navigator.push(
-                                  context,
-                                  MaterialPageRoute(
-                                      builder: (context) =>
-                                          MainProfileScreen()),
-                                );
-                              },
-                              child: RichText(
-                                text: TextSpan(
-                                  text: context.userData['first_name'] +
-                                      ' ' +
-                                      context.userData['last_name'] +
-                                      '\n',
+                        CircleAvatar(
+                          radius: getVerticalSize(25),
+                          backgroundImage: NetworkImage(context.userData['photo']),
+                        ),
+                        HorizontalSpace(width: 20),
+                        GestureDetector(
+                          onTap: () {
+                            Navigator.push(
+                              context,
+                              MaterialPageRoute(builder: (context) => MainProfileScreen()),
+                            );
+                          },
+                          child: RichText(
+                            text: TextSpan(
+                              text: '${_firstNameController.text} ${_lastNameController.text}\n',
+                              style: TextStyle(
+                                fontSize: 14,
+                                color: Colors.black,
+                                fontFamily: 'Source Sans Pro',
+                                fontWeight: FontWeight.w600,
+                              ),
+                              children: <TextSpan>[
+                                TextSpan(
+                                  text: 'Редактирование профиля',
                                   style: TextStyle(
-                                    fontSize: 14,
-                                    color: Colors.black,
+                                    color: Colors.grey,
                                     fontFamily: 'Source Sans Pro',
                                     fontWeight: FontWeight.w600,
                                   ),
-                                  children: <TextSpan>[
-                                    TextSpan(
-                                      text: '3 близких' +
-                                          // context.userData['patient_id'] +
-                                          "",
-                                      style: TextStyle(
-                                        color: Colors.grey,
-                                        fontFamily: 'Source Sans Pro',
-                                        fontWeight: FontWeight.w600,
-                                      ),
-                                    ),
-                                  ],
-                                ),
-                              ))
-                        ],
-                      ),
-                      SizedBox(height: 40),
-                        Container(
-                          padding: const EdgeInsets.symmetric(
-                            horizontal: 8,
-                            vertical: 2,
-                          ),
-                          decoration: BoxDecoration(
-                            color: const Color.fromARGB(255, 255, 255, 255),
-                            borderRadius: BorderRadius.circular(20.0),
-                          ),
-                          child: Row(
-                            children: [
-                              const Text(
-                                'ФИО',
-                                style: TextStyle(
-                                  fontSize: 12,
-                                  color: Color.fromARGB(255, 70, 70, 70),
-                                ),
-                              ),
-                            ],
-                          ),
-                        ),
-                        Container(
-                          height: 46,
-                          padding: const EdgeInsets.symmetric(
-                            horizontal: 8,
-                            vertical: 2,
-                          ),
-                          decoration: BoxDecoration(
-                            color: const Color(0xFFF4F8FF),
-                            borderRadius: BorderRadius.circular(20.0),
-                          ),
-                          child: Row(
-                            children: [
-                              const Text(
-                                'Симонова Алла Витальевна',
-                                style: TextStyle(
-                                  fontSize: 14,
-                                  color: Colors.black,
                                 ),
-                              ),
-                              const Spacer(),
-                              Stack(
-                                alignment: Alignment.center,
-                                
-                              ),
-                            ],
+                              ],
+                            ),
                           ),
-                        ),
+                        )
                       ],
                     ),
                   ),
-                  Container(
-                    width: double.infinity,
-                    padding: const EdgeInsets.symmetric(
-                        horizontal: 16, vertical: 12),
-                    decoration: BoxDecoration(
-                      color: const Color.fromARGB(255, 255, 255, 255)
-                          .withOpacity(0.95),
-                    ),
-                    child: Column(
-                      mainAxisSize: MainAxisSize.min,
-                      crossAxisAlignment: CrossAxisAlignment.start,
-                      children: [
-                        Container(
-                          padding: const EdgeInsets.symmetric(
-                            horizontal: 8,
-                            vertical: 2,
-                          ),
-                          decoration: BoxDecoration(
-                            color: const Color.fromARGB(255, 255, 255, 255),
-                            borderRadius: BorderRadius.circular(20.0),
-                          ),
-                          child: Row(
-                            children: [
-                              const Text(
-                                'Номер телефона',
-                                style: TextStyle(
-                                  fontSize: 12,
-                                  color: Color.fromARGB(255, 70, 70, 70),
-                                ),
-                              ),
-                            ],
-                          ),
-                        ),
-                        Container(
-                          height: 46,
-                          padding: const EdgeInsets.symmetric(
-                            horizontal: 8,
-                            vertical: 2,
-                          ),
-                          decoration: BoxDecoration(
-                            color: const Color(0xFFF4F8FF),
-                            borderRadius: BorderRadius.circular(20.0),
-                          ),
-                          child: Row(
-                            children: [
-                              const Text(
-                                '+7 916 123 45 67',
-                                style: TextStyle(
-                                  fontSize: 14,
-                                  color: Colors.black,
-                                ),
-                              ),
-                              const Spacer(),
-                              Stack(
-                                alignment: Alignment.center,
-                                
-                              ),
-                            ],
-                          ),
-                        ),
-                      ],
-                    ),
+
+                  // First Name Field
+                  _buildEditableField(
+                    label: 'Имя',
+                    controller: _firstNameController,
+                    hintText: 'Введите ваше имя',
                   ),
-                  Container(
-                    width: double.infinity,
-                    padding: const EdgeInsets.symmetric(
-                        horizontal: 16, vertical: 12),
-                    decoration: BoxDecoration(
-                      color: const Color.fromARGB(255, 255, 255, 255)
-                          .withOpacity(0.95),
-                    ),
-                    child: Column(
-                      mainAxisSize: MainAxisSize.min,
-                      crossAxisAlignment: CrossAxisAlignment.start,
-                      children: [
-                        Container(
-                          padding: const EdgeInsets.symmetric(
-                            horizontal: 8,
-                            vertical: 2,
-                          ),
-                          decoration: BoxDecoration(
-                            color: const Color.fromARGB(255, 255, 255, 255),
-                            borderRadius: BorderRadius.circular(20.0),
-                          ),
-                          child: Row(
-                            children: [
-                              const Text(
-                                'Дата рождения',
-                                style: TextStyle(
-                                  fontSize: 12,
-                                  color: Color.fromARGB(255, 70, 70, 70),
-                                ),
-                              ),
-                            ],
-                          ),
-                        ),
-                        Container(
-                          height: 46,
-                          padding: const EdgeInsets.symmetric(
-                            horizontal: 8,
-                            vertical: 2,
-                          ),
-                          decoration: BoxDecoration(
-                            color: const Color(0xFFF4F8FF),
-                            borderRadius: BorderRadius.circular(20.0),
-                          ),
-                          child: Row(
-                            children: [
-                              const Text(
-                                '03.10.1994',
-                                style: TextStyle(
-                                  fontSize: 14,
-                                  color: Colors.black,
-                                ),
-                              ),
-                              const Spacer(),
-                              Stack(
-                                alignment: Alignment.center,
-                                
-                              ),
-                            ],
-                          ),
-                        ),
-                      ],
-                    ),
+
+                  // Last Name Field
+                  _buildEditableField(
+                    label: 'Фамилия',
+                    controller: _lastNameController,
+                    hintText: 'Введите вашу фамилию',
                   ),
-                  Container(
-                    width: double.infinity,
-                    padding: const EdgeInsets.symmetric(
-                        horizontal: 16, vertical: 12),
-                    decoration: BoxDecoration(
-                      color: const Color.fromARGB(255, 255, 255, 255)
-                          .withOpacity(0.95),
-                    ),
-                    child: Column(
-                      mainAxisSize: MainAxisSize.min,
-                      crossAxisAlignment: CrossAxisAlignment.start,
-                      children: [
-                        Container(
-                          padding: const EdgeInsets.symmetric(
-                            horizontal: 8,
-                            vertical: 2,
-                          ),
-                          decoration: BoxDecoration(
-                            color: const Color.fromARGB(255, 255, 255, 255),
-                            borderRadius: BorderRadius.circular(20.0),
-                          ),
-                          child: Row(
-                            children: [
-                              const Text(
-                                'Почта',
-                                style: TextStyle(
-                                  fontSize: 12,
-                                  color: Color.fromARGB(255, 70, 70, 70),
-                                ),
-                              ),
-                            ],
-                          ),
-                        ),
-                        Container(
-                          height: 46,
-                          padding: const EdgeInsets.symmetric(
-                            horizontal: 8,
-                            vertical: 2,
-                          ),
-                          decoration: BoxDecoration(
-                            color: const Color(0xFFF4F8FF),
-                            borderRadius: BorderRadius.circular(20.0),
-                          ),
-                          child: Row(
-                            children: [
-                              const Text(
-                                'Start782@yandex.ru',
-                                style: TextStyle(
-                                  fontSize: 14,
-                                  color: Colors.black,
-                                ),
-                              ),
-                              const Spacer(),
-                              Stack(
-                                alignment: Alignment.center,
-                               
-                              ),
-                            ],
-                          ),
-                        ),
-                      ],
-                    ),
+
+                  // Phone Field
+                  _buildEditableField(
+                    label: 'Номер телефона',
+                    controller: _phoneController,
+                    hintText: 'Введите номер телефона',
+                    keyboardType: TextInputType.phone,
                   ),
-                  Container(
-                    width: double.infinity,
-                    padding: const EdgeInsets.symmetric(
-                        horizontal: 16, vertical: 12),
-                    decoration: BoxDecoration(
-                      color: const Color.fromARGB(255, 255, 255, 255)
-                          .withOpacity(0.95),
-                    ),
-                    child: Column(
-                      mainAxisSize: MainAxisSize.min,
-                      crossAxisAlignment: CrossAxisAlignment.start,
-                      children: [
-                        Container(
-                          padding: const EdgeInsets.symmetric(
-                            horizontal: 8,
-                            vertical: 2,
-                          ),
-                          decoration: BoxDecoration(
-                            color: const Color.fromARGB(255, 255, 255, 255),
-                            borderRadius: BorderRadius.circular(20.0),
-                          ),
-                          child: Row(
-                            children: [
-                              const Text(
-                                'СНИЛС',
-                                style: TextStyle(
-                                  fontSize: 12,
-                                  color: Color.fromARGB(255, 70, 70, 70),
-                                ),
-                              ),
-                            ],
-                          ),
-                        ),
-                        Container(
-                          height: 46,
-                          padding: const EdgeInsets.symmetric(
-                            horizontal: 8,
-                            vertical: 2,
-                          ),
-                          decoration: BoxDecoration(
-                            color: const Color(0xFFF4F8FF),
-                            borderRadius: BorderRadius.circular(20.0),
-                          ),
-                          child: Row(
-                            children: [
-                              const Text(
-                                '142-667-877 31',
-                                style: TextStyle(
-                                  fontSize: 14,
-                                  color: Colors.black,
-                                ),
-                              ),
-                              const Spacer(),
-                              Stack(
-                                alignment: Alignment.center,
-                               
-                              ),
-                            ],
-                          ),
-                        ),
-                      ],
-                    ),
+
+                  // Birth Date Field
+                  _buildEditableField(
+                    label: 'Дата рождения',
+                    controller: _birthDateController,
+                    hintText: 'ДД.ММ.ГГГГ',
+                    keyboardType: TextInputType.datetime,
+                  ),
+
+                  // Email Field
+                  _buildEditableField(
+                    label: 'Почта',
+                    controller: _emailController,
+                    hintText: 'Введите email',
+                    keyboardType: TextInputType.emailAddress,
                   ),
-                  
+
+                  // SNILS Field
+                  _buildEditableField(
+                    label: 'СНИЛС',
+                    controller: _snilsController,
+                    hintText: 'Введите номер СНИЛС',
+                    keyboardType: TextInputType.text,
+                  ),
+
+                  // Privacy Agreement
                   Container(
-                    padding:
-                        const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
+                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                     child: Row(
                       crossAxisAlignment: CrossAxisAlignment.center,
                       children: [
-                        // Контейнер для чекбокса
                         Container(
                           width: 24,
                           height: 24,
                           child: Theme(
-                              data: ThemeData(
-                                unselectedWidgetColor: Colors.transparent,
-                              ),
-                              child: Checkbox(
-                                activeColor: Colors.blue,
-                                checkColor: Colors.white,
-                                value: isChecked,
-                                shape: const CircleBorder(),
-                                onChanged: (bool? value) {
-                                  setState(() {
-                                    isChecked = value!;
-                                  });
-                                },
-                              )),
+                            data: ThemeData(unselectedWidgetColor: Colors.transparent),
+                            child: Checkbox(
+                              activeColor: Colors.blue,
+                              checkColor: Colors.white,
+                              value: isChecked,
+                              shape: const CircleBorder(),
+                              onChanged: (bool? value) {
+                                setState(() {
+                                  isChecked = value!;
+                                });
+                              },
+                            ),
+                          ),
                         ),
-
-                        // Текст с красной звездочкой
                         const SizedBox(width: 8),
-
-                        // Красная звездочка
                         Container(
                           width: 12,
                           height: 12,
@@ -443,7 +276,6 @@ Row(
                             size: 8,
                           ),
                         ),
-                        // Текст
                         const Text(
                           'Согласен на обработку персональных данных',
                           style: TextStyle(
@@ -454,55 +286,55 @@ Row(
                       ],
                     ),
                   ),
+
+                  // Action Buttons
                   Row(
                     mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                     children: [
-                      // Кнопка отмены
+                      // Cancel Button
                       SizedBox(
                         width: MediaQuery.of(context).size.width * 0.35,
                         child: OutlinedButton(
                           onPressed: () => Navigator.pop(context),
                           style: OutlinedButton.styleFrom(
-                            shape: RoundedRectangleBorder(
-                              borderRadius: BorderRadius.circular(16),
-                            ),
-                            side: BorderSide(
-                                color: const Color.fromARGB(255, 96, 159, 222)),
+                            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
+                            side: BorderSide(color: const Color.fromARGB(255, 96, 159, 222)),
                           ),
                           child: Text(
                             'Отменить',
                             style: TextStyle(
                               color: Colors.black,
-                              fontSize:
-                                  MediaQuery.of(context).size.width * 0.035,
+                              fontSize: MediaQuery.of(context).size.width * 0.035,
                             ),
                           ),
                         ),
                       ),
 
-                      // Кнопка выхода
+                      // Save Button
                       SizedBox(
                         width: MediaQuery.of(context).size.width * 0.35,
                         child: ElevatedButton(
-                          onPressed: () {
-                            Navigator.pop(context);
-                            // Здесь добавьте логику выхода из приложения
-                          },
+                          onPressed: isLoading ? null : _saveProfile,
                           style: ElevatedButton.styleFrom(
-                            backgroundColor:
-                                const Color.fromARGB(255, 96, 159, 222),
-                            shape: RoundedRectangleBorder(
-                              borderRadius: BorderRadius.circular(16),
-                            ),
-                          ),
-                          child: Text(
-                            'Сохранить',
-                            style: TextStyle(
-                              color: Colors.white,
-                              fontSize:
-                                  MediaQuery.of(context).size.width * 0.035,
-                            ),
-                          ),
+                            backgroundColor: const Color.fromARGB(255, 96, 159, 222),
+                            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
+                          ),
+                          child: isLoading
+                              ? SizedBox(
+                                  width: 20,
+                                  height: 20,
+                                  child: CircularProgressIndicator(
+                                    strokeWidth: 2,
+                                    valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
+                                  ),
+                                )
+                              : Text(
+                                  'Сохранить',
+                                  style: TextStyle(
+                                    color: Colors.white,
+                                    fontSize: MediaQuery.of(context).size.width * 0.035,
+                                  ),
+                                ),
                         ),
                       ),
                     ],
@@ -511,8 +343,67 @@ Row(
               ),
             ),
           ),
-           //отступ снизу
-                        Container(height: getVerticalSize(100))
+          Container(height: getVerticalSize(100))
+        ],
+      ),
+    );
+  }
+
+  Widget _buildEditableField({
+    required String label,
+    required TextEditingController controller,
+    required String hintText,
+    TextInputType keyboardType = TextInputType.text,
+  }) {
+    return Container(
+      width: double.infinity,
+      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
+      decoration: BoxDecoration(
+        color: const Color.fromARGB(255, 255, 255, 255).withOpacity(0.95),
+      ),
+      child: Column(
+        mainAxisSize: MainAxisSize.min,
+        crossAxisAlignment: CrossAxisAlignment.start,
+        children: [
+          Container(
+            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
+            decoration: BoxDecoration(
+              color: const Color.fromARGB(255, 255, 255, 255),
+              borderRadius: BorderRadius.circular(20.0),
+            ),
+            child: Text(
+              label,
+              style: TextStyle(
+                fontSize: 12,
+                color: Color.fromARGB(255, 70, 70, 70),
+              ),
+            ),
+          ),
+          Container(
+            height: 46,
+            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 2),
+            decoration: BoxDecoration(
+              color: const Color(0xFFF4F8FF),
+              borderRadius: BorderRadius.circular(20.0),
+            ),
+            child: TextField(
+              controller: controller,
+              keyboardType: keyboardType,
+              decoration: InputDecoration(
+                border: InputBorder.none,
+                hintText: hintText,
+                hintStyle: TextStyle(
+                  fontSize: 14,
+                  color: Colors.grey,
+                ),
+                contentPadding: EdgeInsets.symmetric(horizontal: 8),
+              ),
+              style: TextStyle(
+                fontSize: 14,
+                color: Colors.black,
+              ),
+            ),
+          ),
         ],
       ),
     );
diff --git a/lib/screens/profile/health_screen.dart b/lib/screens/profile/health_screen.dart
index e03f2d0..0799690 100644
--- a/lib/screens/profile/health_screen.dart
+++ b/lib/screens/profile/health_screen.dart
@@ -6,7 +6,8 @@ import 'package:doctorq/widgets/top_back.dart';
 import 'package:doctorq/app_export.dart';
 import 'package:flutter/material.dart';
 import 'package:http/http.dart' as http;
-import 'package:table_calendar/table_calendar.dart';
+//import 'package:table_calendar/TableCalendar.dart';
+import 'dart:convert';
 
 class HealthScreen extends StatefulWidget {
   const HealthScreen({Key? key}) : super(key: key);
@@ -18,11 +19,43 @@ class HealthScreen extends StatefulWidget {
 class _HealthScreenState extends State<HealthScreen>
     with SingleTickerProviderStateMixin {
   TabController? tabController;
+  List<dynamic> articles = [];
+  bool isLoading = true;
+  String? errorMessage;
 
   @override
   void initState() {
     super.initState();
     tabController = TabController(length: 2, vsync: this);
+    _fetchArticles();
+  }
+
+  Future<void> _fetchArticles() async {
+    try {
+      final response = await http.get(
+        Uri.parse('https://admin.onlinedoctor.su/api/articles'),
+      );
+
+      if (response.statusCode == 200) {
+        final Map<String, dynamic> responseData = json.decode(response.body);
+        final List<dynamic> fetchedArticles = responseData['data'] ?? [];
+        
+        setState(() {
+          articles = fetchedArticles;
+          isLoading = false;
+        });
+      } else {
+        setState(() {
+          errorMessage = 'Failed to load articles: ${response.statusCode}';
+          isLoading = false;
+        });
+      }
+    } catch (e) {
+      setState(() {
+        errorMessage = 'Error loading articles: $e';
+        isLoading = false;
+      });
+    }
   }
 
   @override
@@ -37,7 +70,6 @@ class _HealthScreenState extends State<HealthScreen>
       body: Column(
           mainAxisSize: MainAxisSize.min,
           crossAxisAlignment: CrossAxisAlignment.start,
-          //   mainAxisAlignment: MainAxisAlignment.end,
           children: [
             ...topBack(
                 text: "Здоровье",
@@ -50,11 +82,13 @@ class _HealthScreenState extends State<HealthScreen>
               child: _buildTabBar(tabController),
             ),
             Expanded(
-//              height: height / 2,
               child: TabBarView(
                 controller: tabController,
                 children: [
-                  ArticlesSection(),
+                  RefreshIndicator(
+                    onRefresh: _fetchArticles,
+                    child: ArticlesSection(),
+                  ),
                   Container(), // Пустой трекер
                 ],
               ),
@@ -125,87 +159,50 @@ class _HealthScreenState extends State<HealthScreen>
   }
 
   Widget ArticlesSection() {
-    return Expanded(
-        child: ListView(
+    if (isLoading) {
+      return Center(child: CircularProgressIndicator());
+    }
+    
+    if (errorMessage != null) {
+      return Center(child: Text(errorMessage!));
+    }
+
+    if (articles.isEmpty) {
+      return Center(child: Text('Нет статей'));
+    }
+
+    // Group articles by category for better organization
+    final Map<String, List<dynamic>> articlesByCategory = {};
+    
+    for (var article in articles) {
+      final categoryName = article['category'] != null && article['category']['title'] != null
+          ? article['category']['title']
+          : 'Без категории';
+      
+      if (!articlesByCategory.containsKey(categoryName)) {
+        articlesByCategory[categoryName] = [];
+      }
+      articlesByCategory[categoryName]!.add(article);
+    }
+
+    return ListView(
       shrinkWrap: true,
-//      scrollDirection: Axis.vertical,
       padding: EdgeInsets.all(16),
-      children: [
-        GestureDetector(
-          onTap: () {
-            Navigator.push(
-              context,
-              MaterialPageRoute(
-                  builder: (context) => const HighPressureScreen()),
-            );
-          },
-          child: ArticleSection(
-            title: "Важные советы от врачей",
-            images: [
-              ArticleImage(
-                imageUrl: "assets/images/ad.png",
-                title: "Высокое давление",
-              ),
-              ArticleImage(
-                imageUrl: "assets/images/abouthealth.png",
-                title: "5 причин заболеваний",
-              ),
-            ],
-          ),
-        ),
-        // VerticalSpace(height: 24),
-        ArticleSection(
-          title: "Все про симптомы",
-          images: [
-            ArticleImage(
-              imageUrl: "assets/images/pain.png",
-              title: "Головная боль",
-            ),
-            ArticleImage(
-              imageUrl: "assets/images/vomiting.png",
-              title: "Рвота и тошнота",
-            ),
-          ],
-        ),
-        //  VerticalSpace(height: 24),
-        ArticleSection(
-          title: "В чем смысл здорового образа жизни",
-          images: [
-            ArticleImage(
-              imageUrl: "assets/images/backpain.png",
-              title: "Спинная боль",
-            ),
-            ArticleImage(
-              imageUrl: "assets/images/vitamins.png",
-              title: "Витамины: миф или реальность",
-            ),
-          ],
-        ),
-        //   VerticalSpace(height: 24),
-        ArticleSection(
-          title: "Важное про беременность",
-          images: [
-            ArticleImage(
-              imageUrl: "assets/images/screening.png",
-              title: "Зачем нужны скрининги",
-            ),
-            ArticleImage(
-              imageUrl: "assets/images/how.png",
-              title: "Как подготовиться к родам",
-            ),
-          ],
-        ),
-        SizedBox(height: 38),
-      ],
-    ));
+      children: articlesByCategory.entries.map((entry) {
+        final categoryName = entry.key;
+        final categoryArticles = entry.value;
+        
+        return ArticleSection(
+          title: categoryName,
+          articles: categoryArticles,
+        );
+      }).toList(),
+    );
   }
 
-  Widget ArticleSection(
-      {required String title, required List<ArticleImage> images}) {
-    ///    return ...List.generate(100, (index) {
-//      return Text("a");
-    //   });
+  Widget ArticleSection({required String title, required List<dynamic> articles}) {
     return Container(
+      margin: EdgeInsets.only(bottom: 24),
       decoration: BoxDecoration(
         color: Colors.white,
         borderRadius: BorderRadius.circular(12),
@@ -233,33 +230,66 @@ class _HealthScreenState extends State<HealthScreen>
           SingleChildScrollView(
             scrollDirection: Axis.horizontal,
             child: Row(
-              children: images
-                  .map((image) => Padding(
-                        padding: EdgeInsets.only(right: 16),
-                        child: Column(
-                          children: [
-                            ClipRRect(
-                              borderRadius: BorderRadius.circular(8),
-                              child: Image.asset(
-                                image.imageUrl,
+              children: articles.map((article) => Padding(
+                padding: EdgeInsets.only(right: 16),
+                child: GestureDetector(
+                  onTap: () {
+                    // Navigate to article detail screen
+                    Navigator.push(
+                      context,
+                      MaterialPageRoute(
+                        builder: (context) => HighPressureScreen(
+                          articleId: article['id'],
+                          articleTitle: article['title'],
+                        ),
+                      ),
+                    );
+                  },
+                  child: Column(
+                    children: [
+                      ClipRRect(
+                        borderRadius: BorderRadius.circular(8),
+                        child: article['image'] != null
+                            ? Image.network('https://admin.onlinedoctor.su/storage/'+
+                                article['image'],
                                 width: 160,
                                 height: 100,
                                 fit: BoxFit.cover,
+                                errorBuilder: (context, error, stackTrace) {
+                                  return Container(
+                                    width: 160,
+                                    height: 100,
+                                    color: Colors.grey[300],
+                                    child: Icon(Icons.error),
+                                  );
+                                },
+                              )
+                            : Container(
+                                width: 160,
+                                height: 100,
+                                color: Colors.grey[300],
+                                child: Icon(Icons.article),
                               ),
-                            ),
-                            SizedBox(height: 8),
-                            Text(
-                              image.title,
-                              textAlign: TextAlign.center,
-                              style: TextStyle(
-                                fontSize: getFontSize(12),
-                                fontFamily: 'Source Sans Pro',
-                              ),
-                            ),
-                          ],
+                      ),
+                      SizedBox(height: 8),
+                      Container(
+                        width: 160,
+                        child: Text(
+                          article['title'] ?? 'Без названия',
+                          textAlign: TextAlign.center,
+                          style: TextStyle(
+                            fontSize: getFontSize(12),
+                            fontFamily: 'Source Sans Pro',
+                            fontWeight: FontWeight.w500,
+                          ),
+                          maxLines: 2,
+                          overflow: TextOverflow.ellipsis,
                         ),
-                      ))
-                  .toList(),
+                      ),
+                    ],
+                  ),
+                ),
+              )).toList(),
             ),
           ),
         ],
@@ -267,13 +297,3 @@ class _HealthScreenState extends State<HealthScreen>
     );
   }
 }
-
-class ArticleImage {
-  final String imageUrl;
-  final String title;
-
-  ArticleImage({
-    required this.imageUrl,
-    required this.title,
-  });
-}
diff --git a/lib/screens/profile/high_pressure.dart b/lib/screens/profile/high_pressure.dart
index 1083f72..f0560a7 100644
--- a/lib/screens/profile/high_pressure.dart
+++ b/lib/screens/profile/high_pressure.dart
@@ -8,9 +8,16 @@ import 'package:doctorq/widgets/top_back.dart';
 import 'package:doctorq/app_export.dart';
 import 'package:doctorq/widgets/custom_button.dart';
 import 'package:video_player/video_player.dart';
+import 'package:intl/intl.dart';
+import 'package:http/http.dart' as http;
+import 'dart:convert';
+import 'package:webview_flutter/webview_flutter.dart';
 
 class HighPressureScreen extends StatefulWidget {
-  const HighPressureScreen({Key? key}) : super(key: key);
+  final int articleId;
+  final String? articleTitle;
+
+  const HighPressureScreen({Key? key, required this.articleId, this.articleTitle}) : super(key: key);
 
   @override
   State<HighPressureScreen> createState() => _HighPressureScreenState();
@@ -19,23 +26,42 @@ class HighPressureScreen extends StatefulWidget {
 class _HighPressureScreenState extends State<HighPressureScreen> with SingleTickerProviderStateMixin {
   DateTime? selectedDate;
   late TabController _tabController;
-   late VideoPlayerController _controller;
+  Map<String, dynamic>? article;
+  bool isLoading = true;
+  String? errorMessage;
 
   @override
   void initState() {
     super.initState();
     _tabController = TabController(length: 3, vsync: this);
-      // For network video
-    _controller = VideoPlayerController.network(
-      'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4',
-    )..initialize().then((_) {
-        setState(() {});
-        _controller.play();
-      });
+    _fetchArticle();
   }
 
+  Future<void> _fetchArticle() async {
+    try {
+      final response = await http.get(
+        Uri.parse('https://admin.onlinedoctor.su/api/articles/${widget.articleId}'),
+      );
 
-
+      if (response.statusCode == 200) {
+        final Map<String, dynamic> articleData = json.decode(response.body)['data'];
+        setState(() {
+          article = articleData;
+          isLoading = false;
+        });
+      } else {
+        setState(() {
+          errorMessage = 'Failed to load article: ${response.statusCode}';
+          isLoading = false;
+        });
+      }
+    } catch (e) {
+      setState(() {
+        errorMessage = 'Error loading article: $e';
+        isLoading = false;
+      });
+    }
+  }
 
   @override
   void dispose() {
@@ -45,16 +71,15 @@ class _HighPressureScreenState extends State<HighPressureScreen> with SingleTick
 
   @override
   Widget build(BuildContext context) {
-   
     return Scaffold(
       body: SingleChildScrollView(
         child: Column(
           mainAxisSize: MainAxisSize.min,
           crossAxisAlignment: CrossAxisAlignment.start,
-             mainAxisAlignment: MainAxisAlignment.end,
+          mainAxisAlignment: MainAxisAlignment.end,
           children: [
             ...topBack(
-              text: "Высокое давление",
+              text: widget.articleTitle ?? article?['title'] ?? "Статья",
               context: context,
               back: true,
               icon: Icon(Icons.favorite),
@@ -63,37 +88,10 @@ class _HighPressureScreenState extends State<HighPressureScreen> with SingleTick
               margin: EdgeInsets.symmetric(horizontal: 16, vertical: 24),
               child: Column(
                 crossAxisAlignment: CrossAxisAlignment.start,
-                
                 children: [
-              
                   SizedBox(height: 16),
-                  Container(child:
-                  _buildTabBar()),
-                  // HealthContent(tabController, MediaQuery.of(context).size.height),
-                 _buildTabContent(_tabController, MediaQuery.of(context).size.height),
-                 /*
-                  CustomButton(
-                    width: size.width,
-                    text: "Записаться",
-                    margin: getMargin(left: 24, top: 22, right: 24),
-                    variant: ButtonVariant.FillBlueA400,
-                    fontStyle: ButtonFontStyle.SourceSansProSemiBold18,
-                    alignment: Alignment.center,
-                    onTap: () {
-                      if (selectedDate != null) {
-                        Navigator.push(
-                          context,
-                          MaterialPageRoute(
-                            builder: (context) =>
-                                AppointmentsStep2FilledScreen(date: selectedDate!),
-                          ),
-                        );
-                      } else {
-                        print("Дата не выбрана");
-                      }
-                    },
-                  ),*/
-                 // SizedBox(height: 100),
+                  Container(child: _buildTabBar()),
+                  _buildTabContent(_tabController, MediaQuery.of(context).size.height),
                 ],
               ),
             ),
@@ -141,7 +139,7 @@ class _HighPressureScreenState extends State<HighPressureScreen> with SingleTick
               decoration: BoxDecoration(
                 borderRadius: BorderRadius.circular(120),
               ),
-              child: Text('Статья'),
+              child: Text('Статьи'),
             ),
           ),
           Tab(
@@ -167,104 +165,141 @@ class _HighPressureScreenState extends State<HighPressureScreen> with SingleTick
     );
   }
 
-  Widget _buildTabContent(TabController _tabController, double height)  {
-     return SizedBox(
+  Widget _buildTabContent(TabController _tabController, double height) {
+    return SizedBox(
       height: height,
-    child: TabBarView(
-      controller: _tabController,
-      children: [
-          
-        _buildArticleContent(),
-        _buildVideoContent(),
-        FakeChatScreen()
-//        Container(), // Обсуждение с врачами (пока пусто)
-      ],
-    ));
+      child: TabBarView(
+        controller: _tabController,
+        children: [
+          _buildArticleContent(),
+          _buildVideoContent(),
+          FakeChatScreen()
+        ],
+      ),
+    );
   }
 
   Widget _buildArticleContent() {
+    if (isLoading) {
+      return Center(child: CircularProgressIndicator());
+    }
+    
+    if (errorMessage != null) {
+      return Center(child: Text(errorMessage!));
+    }
+
+    if (article == null) {
+      return Center(child: Text('Статья не найдена'));
+    }
+
     return ListView(
-      shrinkWrap: true,
-      physics: NeverScrollableScrollPhysics(),
       padding: EdgeInsets.all(16),
-      children: List.generate(
-        8,
-        (index) => Column(
-          crossAxisAlignment: CrossAxisAlignment.start,
-          children: [
-            Text(
-              _getSectionTitle(index),
-              style: TextStyle(
-                fontSize: getFontSize(16),
-                fontWeight: FontWeight.bold,
-                fontFamily: 'SourceSansPro',
+      children: [
+        _buildArticleDetail(article!),
+      ],
+    );
+  }
+/*
+  Widget _buildArticleItem(Map<String, dynamic> article) {
+    return Container(
+      margin: EdgeInsets.only(bottom: 16),
+      decoration: BoxDecoration(
+        color: Colors.white,
+        borderRadius: BorderRadius.circular(12),
+        boxShadow: [
+          BoxShadow(
+            color: Colors.black.withOpacity(0.05),
+            blurRadius: 8,
+            offset: Offset(0, 2),
+          ),
+        ],
+      ),
+      child: Column(
+        crossAxisAlignment: CrossAxisAlignment.start,
+        children: [
+          if (article['image'] != null)
+            ClipRRect(
+              borderRadius: BorderRadius.only(
+                topLeft: Radius.circular(12),
+                topRight: Radius.circular(12),
               ),
-            ),
-            SizedBox(height: 8),
-            Container(
-              padding: EdgeInsets.all(16),
-              decoration: BoxDecoration(
-                color: const Color(0xFFF4F8FF),
-                borderRadius: BorderRadius.circular(12),
+              child: Image.network('https://admin.onlinedoctor.su/storage/'+
+                article['image'],
+                width: double.infinity,
+                height: 200,
+                fit: BoxFit.cover,
               ),
-              child: Text(
-                _getSectionText(index),
-                style: TextStyle(
-                  fontSize: getFontSize(14),
-                  fontFamily: 'SourceSansPro',
+            ),
+          Padding(
+            padding: EdgeInsets.all(16),
+            child: Column(
+              crossAxisAlignment: CrossAxisAlignment.start,
+              children: [
+                if (article['category'] != null && article['category']['title'] != null)
+                  Container(
+                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
+                    decoration: BoxDecoration(
+                      color: Colors.blue[50],
+                      borderRadius: BorderRadius.circular(4),
+                    ),
+                    child: Text(
+                      article['category']['title'],
+                      style: TextStyle(
+                        fontSize: getFontSize(12),
+                        color: Colors.blue[700],
+                        fontWeight: FontWeight.w500,
+                      ),
+                    ),
+                  ),
+                SizedBox(height: 8),
+                Text(
+                  article['title'] ?? 'Без названия',
+                  style: TextStyle(
+                    fontSize: getFontSize(18),
+                    fontWeight: FontWeight.bold,
+                    fontFamily: 'SourceSansPro',
+                  ),
                 ),
-              ),
+                SizedBox(height: 8),
+                if (article['description'] != null)
+                  Text(
+                    article['description'],
+                    style: TextStyle(
+                      fontSize: getFontSize(14),
+                      fontFamily: 'SourceSansPro',
+                      color: Colors.grey[600],
+                    ),
+                  ),
+              ],
             ),
-            SizedBox(height: 24),
-          ],
-        ),
+          ),
+        ],
       ),
     );
-  }
+  }*/
 
   Widget _buildVideoContent() {
+    if (isLoading) {
+      return Center(child: CircularProgressIndicator());
+    }
+    
+    if (errorMessage != null) {
+      return Center(child: Text(errorMessage!));
+    }
+
+    if (article == null || article!['video_url'] == null || article!['video_url'].toString().isEmpty) {
+      return Center(child: Text('Нет видео для этой статьи'));//+article.toString()));
+    }
+
     return ListView(
-      shrinkWrap: true,
-      physics: NeverScrollableScrollPhysics(),
       padding: EdgeInsets.all(16),
       children: [
-        _buildVideoItem(
-          title: "Высокое давление - миф?",
-          imageUrl: "assets/images/oneforvideo.png",
-        ),
-        SizedBox(height: 16),
-        _buildVideoItem(
-          title: "Все о давлении",
-          imageUrl: "assets/images/twoforvideo.png",
-        ),
-        SizedBox(height: 16),
-        _buildVideoItem(
-          title: "Все о давлении",
-          imageUrl: "assets/images/threeforvideo.png",
-        ),
-        SizedBox(height: 16),
-        _buildVideoItem(
-          title: "Все о давлении",
-          imageUrl: "assets/images/fourforvideo.png",
-        ),
-        SizedBox(height: 16),
-        _buildVideoItem(
-          title: "Все о давлении",
-          imageUrl: "assets/images/fiveforvideo.png",
-        ),
+        _buildVideoItem(article!),
       ],
     );
   }
-void _toggleVideoPlayback() {
-  setState(() {
-    if (_controller.value.isPlaying) {
-      _controller.pause();
-    } else {
-      _controller.play();
-    }
-  });
-}
-  Widget _buildVideoItem({required String title, required String imageUrl}) {
+
+  Widget _buildArticleDetail(Map<String, dynamic> article) {
     return Container(
       decoration: BoxDecoration(
         color: Colors.white,
@@ -280,71 +315,256 @@ void _toggleVideoPlayback() {
       child: Column(
         crossAxisAlignment: CrossAxisAlignment.start,
         children: [
+          if (article['image'] != null)
+            ClipRRect(
+              borderRadius: BorderRadius.only(
+                topLeft: Radius.circular(12),
+                topRight: Radius.circular(12),
+              ),
+              child: Image.network('https://admin.onlinedoctor.su/storage/'+
+                article['image'],
+                width: double.infinity,
+                height: 200,
+                fit: BoxFit.cover,
+                errorBuilder: (context, error, stackTrace) {
+                  return Container(
+                    height: 200,
+                    color: Colors.grey[300],
+                    child: Icon(Icons.error),
+                  );
+                },
+              ),
+            ),
           Padding(
             padding: EdgeInsets.all(16),
-            child: Text(
-              title,
-              style: TextStyle(
-                fontSize: getFontSize(16),
-                fontWeight: FontWeight.bold,
-                fontFamily: 'SourceSansPro',
-              ),
+            child: Column(
+              crossAxisAlignment: CrossAxisAlignment.start,
+              children: [
+                if (article['category'] != null && article['category']['title'] != null)
+                  Container(
+                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
+                    decoration: BoxDecoration(
+                      color: Colors.blue[50],
+                      borderRadius: BorderRadius.circular(4),
+                    ),
+                    child: Text(
+                      article['category']['title'],
+                      style: TextStyle(
+                        fontSize: getFontSize(12),
+                        color: Colors.blue[700],
+                        fontWeight: FontWeight.w500,
+                      ),
+                    ),
+                  ),
+                SizedBox(height: 16),
+                Text(
+                  article['title'] ?? 'Без названия',
+                  style: TextStyle(
+                    fontSize: getFontSize(24),
+                    fontWeight: FontWeight.bold,
+                    fontFamily: 'SourceSansPro',
+                  ),
+                ),
+                SizedBox(height: 16),
+                if (article['description'] != null)
+                  Text(
+                    article['description'],
+                    style: TextStyle(
+                      fontSize: getFontSize(16),
+                      fontFamily: 'SourceSansPro',
+                      color: Colors.grey[800],
+                      height: 1.5,
+                    ),
+                  ),
+                SizedBox(height: 16),
+                if (article['html'] != null)
+                  Container(
+                    padding: EdgeInsets.all(12),
+                    decoration: BoxDecoration(
+                      color: Colors.grey[50],
+                      borderRadius: BorderRadius.circular(8),
+                    ),
+                    child: SizedBox(
+                      height: 300, // Set a fixed height for the WebView
+                      child: WebViewWidget(
+                        controller: WebViewController()
+                          ..setJavaScriptMode(JavaScriptMode.unrestricted)
+                          ..loadHtmlString(
+                            '''
+                            <!DOCTYPE html>
+                            <html>
+                            <head>
+                              <meta name="viewport" content="width=device-width, initial-scale=1.0">
+                              <style>
+                                body {
+                                  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
+                                  font-size: 14px;
+                                  line-height: 1.5;
+                                  color: #374151;
+                                  padding: 0;
+                                  margin: 0;
+                                }
+                                img { max-width: 100%; height: auto; }
+                                iframe { max-width: 100%; }
+                                table { width: 100%; border-collapse: collapse; }
+                                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
+                                th { background-color: #f3f4f6; }
+                              </style>
+                            </head>
+                            <body>
+                              ${article['html']}
+                            </body>
+                            </html>
+                            ''',
+                          ),
+                      ),
+                    ),
+                  ),
+              ],
             ),
-          ),Center(
-        child: _controller.value.isInitialized
-            ? GestureDetector(child: AspectRatio(
-                aspectRatio: _controller.value.aspectRatio,
-                child: VideoPlayer(_controller),
-              ),onTap:  () {_controller.pause(); })
-            : CircularProgressIndicator(),
+          ),
+        ],
       ),
-          /*ClipRRect(
-            borderRadius: BorderRadius.only(
-              bottomLeft: Radius.circular(12),
-              bottomRight: Radius.circular(12),
+    );
+  }
+
+  Widget _buildVideoItem(Map<String, dynamic> article) {
+    return Container(
+      margin: EdgeInsets.only(bottom: 16),
+      decoration: BoxDecoration(
+        color: Colors.white,
+        borderRadius: BorderRadius.circular(12),
+        boxShadow: [
+          BoxShadow(
+            color: Colors.black.withOpacity(0.05),
+            blurRadius: 8,
+            offset: Offset(0, 2),
+          ),
+        ],
+      ),
+      child: Column(
+        crossAxisAlignment: CrossAxisAlignment.start,
+        children: [
+          Padding(
+            padding: EdgeInsets.all(16),
+            child: Column(
+              crossAxisAlignment: CrossAxisAlignment.start,
+              children: [
+                if (article['category'] != null && article['category']['title'] != null)
+                  Container(
+                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
+                    decoration: BoxDecoration(
+                      color: Colors.blue[50],
+                      borderRadius: BorderRadius.circular(4),
+                    ),
+                    child: Text(
+                      article['category']['title'],
+                      style: TextStyle(
+                        fontSize: getFontSize(12),
+                        color: Colors.blue[700],
+                        fontWeight: FontWeight.w500,
+                      ),
+                    ),
+                  ),
+                SizedBox(height: 8),
+                Text(
+                  article['title'] ?? 'Без названия',
+                  style: TextStyle(
+                    fontSize: getFontSize(18),
+                    fontWeight: FontWeight.bold,
+                    fontFamily: 'SourceSansPro',
+                  ),
+                ),
+              ],
             ),
-            child: Image.asset(
-              imageUrl,
-              width: double.infinity,
-              fit: BoxFit.cover,
-              height: 150,
+          ),
+          if (article['video_url'] != null)
+            Container(
+              padding: EdgeInsets.all(16),
+              child: VideoPlayerWidget(videoUrl: article['video_url']),
             ),
-          ),*/
         ],
       ),
     );
   }
+}
 
-  String _getSectionTitle(int index) {
-    final titles = [
-      "Что нужно знать?",
-      "Что такое высокое давление?",
-      "Причины гипертонии?",
-      "Симптомы высокого давления",
-      "Последствия гипертонии",
-      "Методы лечения",
-      "Профилактика",
-      "Заключение",
-    ];
-    return titles[index];
+class VideoPlayerWidget extends StatefulWidget {
+  final String videoUrl;
+
+  const VideoPlayerWidget({Key? key, required this.videoUrl}) : super(key: key);
+
+  @override
+  _VideoPlayerWidgetState createState() => _VideoPlayerWidgetState();
+}
+
+class _VideoPlayerWidgetState extends State<VideoPlayerWidget> {
+  late VideoPlayerController _controller;
+  bool _isPlaying = false;
+
+  @override
+  void initState() {
+    super.initState();
+    _controller = VideoPlayerController.network(widget.videoUrl)
+      ..initialize().then((_) {
+        setState(() {});
+      });
   }
 
-  String _getSectionText(int index) {
-    final texts = [
-      "Высокое давление, или гипертония, представляет собой серьезную проблему для здоровья, затрагивающую миллионы людей по всему миру. В этой статье мы разберем основные аспекты заболевания, его причины, симптомы, методы лечения и профилактики.",
-      "Высокое давление — это состояние, при котором значения артериального давления превышают нормальные показатели (обычно выше 140/90 мм рт. ст.). Гипертония считается «тихим убийцей», поскольку она может не иметь заметных симптомов, но в то же время приводит к серьезным последствиям, таким как инсульт, сердечная недостаточность и болезни почек.",
-      "Существуют как первичные, так и вторичные формы гипертонии. Первичная гипертония (или эссенциальная) развивается без явной причины и чаще всего связана с наследственными факторами, неправильным образом жизни и стрессом. Вторичная гипертония возникает в результате других заболеваний, таких как заболевания почек, гормональные расстройства или употребление некоторых медикаментов.",
-      "К сожалению, многие люди не чувствуют никаких симптомов при высоком давлении. Однако некоторые могут испытывать: головные боли, ощущение пульсации в голове, усталость или слабость, затуманенное зрение, одышку. Если вы замечаете у себя подобные симптомы, стоит обратиться к врачу для диагностики.",
-      "Долгосрочное высокое давление может привести к множеству серьезных заболеваний, включая: инсульт, сердечные заболевания, поражения почек, потерю зрения, артериальные заболевания. Эти осложнения делают гипертонию одной из ведущих причин смертности в мире.",
-      "Лечение высокого давления обычно включает изменение образа жизни и, при необходимости, применение медикаментов. К основным методам относятся: соблюдение сбалансированной диеты с низким содержанием соли и жиров, регулярные физические нагрузки, отказ от курения и ограничение алкоголя, управление стрессом. Если изменения в образе жизни недостаточны, врач может назначить гипотензивные средства, которые помогут контролировать давление.",
-      "Профилактика гипертонии включает в себя: регулярные проверки артериального давления, поддержание здорового веса, употребление достаточного количества воды, ограничение потребления кофеина и алкоголя, стремление к активному образу жизни. Эти шаги помогут снизить риск развития гипертонии и других связанных заболеваний.",
-      "Высокое давление — это серьезное заболевание, требующее внимания и своевременного вмешательства. Главное — следить за своим здоровьем, обращать внимание на признаки и вовремя консультироваться с врачом. Профилактика и правильное лечение помогут избежать серьезных последствий и улучшить качество жизни.",
-    ];
-    return texts[index];
+  @override
+  void dispose() {
+    _controller.dispose();
+    super.dispose();
   }
-}
 
+  void _togglePlayback() {
+    setState(() {
+      if (_controller.value.isPlaying) {
+        _controller.pause();
+        _isPlaying = false;
+      } else {
+        _controller.play();
+        _isPlaying = true;
+      }
+    });
+  }
 
+  @override
+  Widget build(BuildContext context) {
+    return GestureDetector(
+      onTap: _togglePlayback,
+      child: Stack(
+        alignment: Alignment.center,
+        children: [
+          _controller.value.isInitialized
+              ? AspectRatio(
+                  aspectRatio: _controller.value.aspectRatio,
+                  child: VideoPlayer(_controller),
+                )
+              : Container(
+                  height: 200,
+                  color: Colors.grey[300],
+                  child: Center(child: CircularProgressIndicator()),
+                ),
+          if (!_isPlaying && _controller.value.isInitialized)
+            Container(
+              decoration: BoxDecoration(
+                color: Colors.black54,
+                shape: BoxShape.circle,
+              ),
+              child: Icon(
+                Icons.play_arrow,
+                color: Colors.white,
+                size: 48,
+              ),
+            ),
+        ],
+      ),
+    );
+  }
+}
+
+// Keep the existing FakeChatScreen class as it was
 class FakeChatScreen extends StatefulWidget {
   @override
   _FakeChatScreenState createState() => _FakeChatScreenState();
@@ -375,16 +595,6 @@ class _FakeChatScreenState extends State<FakeChatScreen> {
   @override
   Widget build(BuildContext context) {
     return Scaffold(
-      /*appBar: AppBar(
-        title: Text("Обсуждение с врачами"),
-        centerTitle: true,
-        actions: [
-          IconButton(
-            icon: Icon(Icons.more_vert),
-            onPressed: () {},
-          ),
-        ],
-      ),*/
       body: Column(
         children: [
           Expanded(
@@ -499,7 +709,6 @@ class _FakeChatScreenState extends State<FakeChatScreen> {
         time: DateTime.now(),
       ));
       
-      // Add fake doctor reply after 1 second
       Future.delayed(Duration(seconds: 1), () {
         setState(() {
           _messages.add(ChatMessage(
@@ -540,4 +749,4 @@ class ChatMessage {
     required this.isMe,
     required this.time,
   });
-}
\ No newline at end of file
+}
diff --git a/lib/screens/profile/popular_doctors.dart b/lib/screens/profile/popular_doctors.dart
index 2b3c9f1..b8d5b45 100644
--- a/lib/screens/profile/popular_doctors.dart
+++ b/lib/screens/profile/popular_doctors.dart
@@ -4,13 +4,57 @@ import 'package:animate_do/animate_do.dart';
 import 'package:doctorq/extensions.dart';
 import 'package:doctorq/screens/home/home_screen/home_screen.dart';
 import 'package:doctorq/screens/home/home_screen/widgets/doctor_item.dart';
+import 'package:doctorq/services/api_service.dart';
+import 'package:doctorq/services/session.dart';
+import 'package:doctorq/stores/doctors_store.dart';
 import 'package:doctorq/utils/size_utils.dart';
 import 'package:doctorq/widgets/spacing.dart';
 import 'package:doctorq/widgets/top_back.dart';
 import 'package:flutter/material.dart';
+import 'package:get_it/get_it.dart';
 
-class PopularPatientsScreen extends StatelessWidget {
+class PopularPatientsScreen extends StatefulWidget {
   const PopularPatientsScreen({Key? key}) : super(key: key);
+
+  @override
+  _PopularPatientsScreenState createState() => _PopularPatientsScreenState();
+}
+
+class _PopularPatientsScreenState extends State<PopularPatientsScreen> {
+  bool _isLoading = true;
+  List<Map<String, dynamic>> _patients = [];
+
+  @override
+  void initState() {
+    super.initState();
+    _loadPatients();
+  }
+
+  Future<void> _loadPatients() async {
+    // Get current doctor ID from user data
+    final currentUser = await Session.getCurrentUser();
+    if (currentUser != null && currentUser.doctorId != null) {
+      bool success = await getPatientsForDoctor(doctorId: currentUser.doctorId!);
+      
+      if (success) {
+        // Get patients from doctors store (temporarily stored there)
+        DoctorsStore storeDoctorsStore = GetIt.instance.get<DoctorsStore>();
+        setState(() {
+          _patients = List<Map<String, dynamic>>.from(storeDoctorsStore.doctorsDataList);
+          _isLoading = false;
+        });
+      } else {
+        setState(() {
+          _isLoading = false;
+        });
+      }
+    } else {
+      setState(() {
+        _isLoading = false;
+      });
+    }
+  }
+
   @override
   Widget build(BuildContext context) {
     return Scaffold(
@@ -120,411 +164,20 @@ class PopularPatientsScreen extends StatelessWidget {
                             ],
                           ),
                         ),
-                        DoctorsSilder20(),
-                      /*
-                        Container(
-                          margin: const EdgeInsets.only(bottom: 8),
-                          padding: const EdgeInsets.symmetric(
-                              horizontal: 12, vertical: 0),
-                          decoration: BoxDecoration(
-                            color: Colors.red.withOpacity(0),
-                            borderRadius: BorderRadius.circular(20),
-                          ),
-                          child: Column(
-                            crossAxisAlignment: CrossAxisAlignment.stretch,
-                            children: [
-                              const Row(
-                                mainAxisAlignment:
-                                    MainAxisAlignment.spaceBetween,
-                                children: [
-                                  Column(
-                                    crossAxisAlignment: CrossAxisAlignment
-                                        .start, // выравнивание всех чилдренов внутри коламн по левому краю
-                                    children: [
-                                      SizedBox(
-                                          height:
-                                              10), // добавлен SizedBox с отступом 16 пикселей
-                                      Text(
-                                        'Женщина, 71',
-                                        style: TextStyle(
-                                          color:
-                                              Color.fromARGB(255, 12, 12, 12),
-                                          fontFamily: 'Source Sans Pro',
-                                          fontWeight: FontWeight.w400,
-                                          fontSize: 14,
-                                        ),
-                                      ),
-                                    ],
-                                  ),
-                                ],
-                              ),
-
-                              // Зеленый контейнер
-                              Container(
-                                margin: const EdgeInsets.only(top: 8),
-                                padding: const EdgeInsets.all(8),
-                                decoration: BoxDecoration(
-                                  color:
-                                      const Color.fromARGB(255, 247, 247, 247)
-                                          .withOpacity(0.8),
-                                  borderRadius: BorderRadius.circular(20),
-                                ),
-                                child: Column(
-                                  crossAxisAlignment: CrossAxisAlignment.start,
-                                  children: [
-                                    Row(
-                                      crossAxisAlignment:
-                                          CrossAxisAlignment.start,
-                                      children: [
-                                        const CircleAvatar(
-                                          radius: 20,
-                                          backgroundImage: AssetImage(
-                                              'assets/images/11.png'), // Используем AssetImage вместо Image.asset
-                                        ),
-                                        const SizedBox(width: 16),
-                                        Expanded(
-                                          child: Column(
-                                            crossAxisAlignment:
-                                                CrossAxisAlignment.start,
-                                            children: [
-                                              const Text('Парфенова К.С.',
-                                                  style: TextStyle(
-                                                      fontWeight:
-                                                          FontWeight.bold)),
-                                              const Text('Женщина, 71'),
-                                            ],
-                                          ),
-                                        ),
-                                        Column(
-                                          crossAxisAlignment:
-                                              CrossAxisAlignment.end,
-                                          children: [
-                                            Container(
-                                              padding:
-                                                  const EdgeInsets.symmetric(
-                                                      horizontal: 2,
-                                                      vertical: 2),
-                                              decoration: BoxDecoration(
-                                                shape: BoxShape.rectangle,
-                                                borderRadius:
-                                                    BorderRadius.circular(20),
-                                                color: const Color.fromARGB(
-                                                    255, 176, 214, 254),
-                                              ),
-                                              constraints: const BoxConstraints(
-                                                  minWidth: 10, minHeight: 4),
-                                              child: Row(
-                                                mainAxisSize: MainAxisSize.min,
-                                                children: [
-                                                  Icon(
-                                                    Icons.currency_ruble,
-                                                    size: 12,
-                                                    color: Color.fromARGB(
-                                                        255, 16, 16, 16),
-                                                  ),
-                                                  const Text('2300',
-                                                      style: TextStyle(
-                                                          color: Color.fromARGB(
-                                                              255, 16, 16, 16),
-                                                          fontSize: 11)),
-                                                ],
-                                              ),
-                                            ),
-                                            const SizedBox(height: 4),
-                                          ],
-                                        ),
-                                      ],
-                                    ),
-                                    const SizedBox(
-                                        height: 8), // Отступ между строками
-                                    Container(
-                                      width: double.infinity, // Полная ширина
-                                      height: 40, // Высота изображения
-                                      decoration: BoxDecoration(
-                                        borderRadius: BorderRadius.circular(
-                                            12), // Закругленные углы
-                                        image: DecorationImage(
-                                          image: AssetImage(
-                                              'assets/images/icons.png'),
-                                          fit: BoxFit.contain,
-                                        ),
+                        _isLoading
+                            ? Center(child: CircularProgressIndicator())
+                            : _patients.isEmpty
+                                ? Center(
+                                    child: Text(
+                                      'У вас пока нет пациентов',
+                                      style: TextStyle(
+                                        color: Colors.grey[600],
+                                        fontSize: 16,
                                       ),
                                     ),
-                                  ],
-                                ),
-                              )
-                            ],
-                          ),
-                        ),
-                        Container(
-                          margin: const EdgeInsets.only(bottom: 8),
-                          padding: const EdgeInsets.symmetric(
-                              horizontal: 12, vertical: 0),
-                          decoration: BoxDecoration(
-                            color: Colors.red.withOpacity(0),
-                            borderRadius: BorderRadius.circular(20),
-                          ),
-                          child: Column(
-                            crossAxisAlignment: CrossAxisAlignment.stretch,
-                            children: [
-                              Row(
-                                mainAxisAlignment:
-                                    MainAxisAlignment.spaceBetween,
-                                children: [
-                                  Column(
-                                    crossAxisAlignment: CrossAxisAlignment
-                                        .start, // выравнивание всех чилдренов внутри коламн по левому краю
-                                    children: [
-                                      const SizedBox(
-                                          height:
-                                              10), // добавлен SizedBox с отступом 16 пикселей
-                                      Text(
-                                        'Анколог',
-                                        style: TextStyle(
-                                          color: const Color.fromARGB(
-                                              255, 12, 12, 12),
-                                          fontFamily: 'Source Sans Pro',
-                                          fontWeight: FontWeight.w400,
-                                          fontSize: 14,
-                                        ),
-                                      ),
-                                    ],
-                                  ),
-                                ],
-                              ),
-
-                              // Зеленый контейнер
-                              Container(
-                                margin: const EdgeInsets.only(top: 8),
-                                padding: const EdgeInsets.all(8),
-                                decoration: BoxDecoration(
-                                  color:
-                                      const Color.fromARGB(255, 247, 247, 247)
-                                          .withOpacity(0.8),
-                                  borderRadius: BorderRadius.circular(20),
-                                ),
-                                child: Column(
-                                  crossAxisAlignment: CrossAxisAlignment.start,
-                                  children: [
-                                    Row(
-                                      crossAxisAlignment:
-                                          CrossAxisAlignment.start,
-                                      children: [
-                                        CircleAvatar(
-                                          radius: 20,
-                                          backgroundImage: AssetImage(
-                                              'assets/images/11.png'), // Используем AssetImage вместо Image.asset
-                                        ),
-                                        const SizedBox(width: 16),
-                                        Expanded(
-                                          child: Column(
-                                            crossAxisAlignment:
-                                                CrossAxisAlignment.start,
-                                            children: [
-                                              const Text('Парфенова К.С.',
-                                                  style: TextStyle(
-                                                      fontWeight:
-                                                          FontWeight.bold)),
-                                              const Text('Женщина, 71'),
-                                            ],
-                                          ),
-                                        ),
-                                        Column(
-                                          crossAxisAlignment:
-                                              CrossAxisAlignment.end,
-                                          children: [
-                                            Container(
-                                              padding:
-                                                  const EdgeInsets.symmetric(
-                                                      horizontal: 2,
-                                                      vertical: 2),
-                                              decoration: BoxDecoration(
-                                                shape: BoxShape.rectangle,
-                                                borderRadius:
-                                                    BorderRadius.circular(20),
-                                                color: const Color.fromARGB(
-                                                    255, 176, 214, 254),
-                                              ),
-                                              constraints: const BoxConstraints(
-                                                  minWidth: 10, minHeight: 4),
-                                              child: Row(
-                                                mainAxisSize: MainAxisSize.min,
-                                                children: [
-                                                  Icon(
-                                                    Icons.currency_ruble,
-                                                    size: 12,
-                                                    color: Color.fromARGB(
-                                                        255, 16, 16, 16),
-                                                  ),
-                                                  const Text('2300',
-                                                      style: TextStyle(
-                                                          color: Color.fromARGB(
-                                                              255, 16, 16, 16),
-                                                          fontSize: 11)),
-                                                ],
-                                              ),
-                                            ),
-                                            const SizedBox(height: 4),
-                                          ],
-                                        ),
-                                      ],
-                                    ),
-                                    const SizedBox(
-                                        height: 8), // Отступ между строками
-                                    Container(
-                                      width: double.infinity, // Полная ширина
-                                      height: 40, // Высота изображения
-                                      decoration: BoxDecoration(
-                                        borderRadius: BorderRadius.circular(
-                                            12), // Закругленные углы
-                                        image: DecorationImage(
-                                          image: AssetImage(
-                                              'assets/images/icons.png'),
-                                          fit: BoxFit.contain,
-                                        ),
-                                      ),
-                                    ),
-                                  ],
-                                ),
-                              )
-                            ],
-                          ),
-                        ),
-                        Container(
-                          margin: const EdgeInsets.only(bottom: 8),
-                          padding: const EdgeInsets.symmetric(
-                              horizontal: 12, vertical: 0),
-                          decoration: BoxDecoration(
-                            color: Colors.red.withOpacity(0),
-                            borderRadius: BorderRadius.circular(20),
-                          ),
-                          child: Column(
-                            crossAxisAlignment: CrossAxisAlignment.stretch,
-                            children: [
-                              Row(
-                                mainAxisAlignment:
-                                    MainAxisAlignment.spaceBetween,
-                                children: [
-                                  Column(
-                                    crossAxisAlignment: CrossAxisAlignment
-                                        .start, // выравнивание всех чилдренов внутри коламн по левому краю
-                                    children: [
-                                      const SizedBox(
-                                          height:
-                                              10), // добавлен SizedBox с отступом 16 пикселей
-                                      Text(
-                                        'Бактериолог',
-                                        style: TextStyle(
-                                          color: const Color.fromARGB(
-                                              255, 12, 12, 12),
-                                          fontFamily: 'Source Sans Pro',
-                                          fontWeight: FontWeight.w400,
-                                          fontSize: 14,
-                                        ),
-                                      ),
-                                    ],
-                                  ),
-                                ],
-                              ),
-
-                              // Зеленый контейнер
-                              Container(
-                                margin: const EdgeInsets.only(top: 8),
-                                padding: const EdgeInsets.all(8),
-                                decoration: BoxDecoration(
-                                  color:
-                                      const Color.fromARGB(255, 247, 247, 247)
-                                          .withOpacity(0.8),
-                                  borderRadius: BorderRadius.circular(20),
-                                ),
-                                child: Column(
-                                  crossAxisAlignment: CrossAxisAlignment.start,
-                                  children: [
-                                    Row(
-                                      crossAxisAlignment:
-                                          CrossAxisAlignment.start,
-                                      children: [
-                                        CircleAvatar(
-                                          radius: 20,
-                                          backgroundImage: AssetImage(
-                                              'assets/images/11.png'), // Используем AssetImage вместо Image.asset
-                                        ),
-                                        const SizedBox(width: 16),
-                                        Expanded(
-                                          child: Column(
-                                            crossAxisAlignment:
-                                                CrossAxisAlignment.start,
-                                            children: [
-                                              const Text('Парфенова К.С.',
-                                                  style: TextStyle(
-                                                      fontWeight:
-                                                          FontWeight.bold)),
-                                              const Text('Женщина, 71'),
-                                            ],
-                                          ),
-                                        ),
-                                        Column(
-                                          crossAxisAlignment:
-                                              CrossAxisAlignment.end,
-                                          children: [
-                                            Container(
-                                              padding:
-                                                  const EdgeInsets.symmetric(
-                                                      horizontal: 2,
-                                                      vertical: 2),
-                                              decoration: BoxDecoration(
-                                                shape: BoxShape.rectangle,
-                                                borderRadius:
-                                                    BorderRadius.circular(20),
-                                                color: const Color.fromARGB(
-                                                    255, 176, 214, 254),
-                                              ),
-                                              constraints: const BoxConstraints(
-                                                  minWidth: 10, minHeight: 4),
-                                              child: Row(
-                                                mainAxisSize: MainAxisSize.min,
-                                                children: [
-                                                  Icon(
-                                                    Icons.currency_ruble,
-                                                    size: 12,
-                                                    color: Color.fromARGB(
-                                                        255, 16, 16, 16),
-                                                  ),
-                                                  const Text('2300',
-                                                      style: TextStyle(
-                                                          color: Color.fromARGB(
-                                                              255, 16, 16, 16),
-                                                          fontSize: 11)),
-                                                ],
-                                              ),
-                                            ),
-                                            const SizedBox(height: 4),
-                                          ],
-                                        ),
-                                      ],
-                                    ),
-                                    const SizedBox(
-                                        height: 8), // Отступ между строками
-                                    Container(
-                                      width: double.infinity, // Полная ширина
-                                      height: 40, // Высота изображения
-                                      decoration: BoxDecoration(
-                                        borderRadius: BorderRadius.circular(
-                                            12), // Закругленные углы
-                                        image: DecorationImage(
-                                          image: AssetImage(
-                                              'assets/images/icons.png'),
-                                          fit: BoxFit.contain,
-                                        ),
-                                      ),
-                                    ),
-                                  ],
-                                ),
-                              )
-                            ],
-                          ),
-                        ),
-                    */  ],
+                                  )
+                                : PatientsSilder(patients: _patients),
+                      ],
                     ),
                   ),
                 ],
@@ -537,21 +190,69 @@ class PopularPatientsScreen extends StatelessWidget {
   }
 }
 
-class DoctorsSilder20 extends StatelessWidget {
-  const DoctorsSilder20({
+class PatientsSilder extends StatelessWidget {
+  final List<Map<String, dynamic>> patients;
+
+  const PatientsSilder({
     Key? key,
+    required this.patients,
   }) : super(key: key);
 
   @override
   Widget build(BuildContext context) {
-    print("doctors");
-    print(context.doctorsData.length);
     return Column(
-        children: List.generate(context.doctorsData.length, (index) {
-      return DoctorItem(
-        item: context.doctorsData[index],
-        index: index,
-      );
-    }));
+      children: patients.map((patient) {
+        return Container(
+          margin: const EdgeInsets.only(bottom: 12),
+          padding: const EdgeInsets.all(12),
+          decoration: BoxDecoration(
+            color: const Color.fromARGB(255, 247, 247, 247).withOpacity(0.8),
+            borderRadius: BorderRadius.circular(16),
+          ),
+          child: Row(
+            crossAxisAlignment: CrossAxisAlignment.start,
+            children: [
+              CircleAvatar(
+                radius: 24,
+                backgroundImage: patient['profile_image'] != null && patient['profile_image'].isNotEmpty
+                    ? NetworkImage(patient['profile_image'])
+                    : AssetImage('assets/images/default_patient.png') as ImageProvider,
+              ),
+              const SizedBox(width: 16),
+              Expanded(
+                child: Column(
+                  crossAxisAlignment: CrossAxisAlignment.start,
+                  children: [
+                    Text(
+                      patient['full_name'] ?? 'Неизвестный пациент',
+                      style: TextStyle(
+                        fontWeight: FontWeight.bold,
+                        fontSize: 16,
+                      ),
+                    ),
+                    const SizedBox(height: 4),
+                    Text(
+                      patient['first_name'] != null && patient['first_name'].isNotEmpty
+                          ? 'Имя: ${patient['first_name']}'
+                          : 'Информация о пациенте',
+                      style: TextStyle(
+                        color: Colors.grey[600],
+                        fontSize: 14,
+                      ),
+                    ),
+                  ],
+                ),
+              ),
+              IconButton(
+                icon: Icon(Icons.chat, color: Colors.blue),
+                onPressed: () {
+                  // TODO: Implement chat functionality
+                },
+              ),
+            ],
+          ),
+        );
+      }).toList(),
+    );
   }
 }
diff --git a/lib/screens/profile/settings/schedule/schedule_screen.dart b/lib/screens/profile/settings/schedule/schedule_screen.dart
index 56b97ba..89c7eb5 100755
--- a/lib/screens/profile/settings/schedule/schedule_screen.dart
+++ b/lib/screens/profile/settings/schedule/schedule_screen.dart
@@ -62,13 +62,13 @@ class _ProfileSettingsAppearanceScreenState
     0,
   ];
   List<String> daysOfWeekStartTime = [
-    "*",
-    "*",
-    "*",
-    "*",
-    "*",
-    "*",
-    "*",
+    "06:00",
+    "06:00",
+    "06:00",
+    "06:00",
+    "06:00",
+    "06:00",
+    "06:00",
   ];
   List<String> daysOfWeekStartTimeType = [
     "*",
@@ -80,13 +80,13 @@ class _ProfileSettingsAppearanceScreenState
     "*",
   ];
   List<String> daysOfWeekEndTime = [
-    "*",
-    "*",
-    "*",
-    "*",
-    "*",
-    "*",
-    "*",
+    "19:00",
+    "19:00",
+    "19:00",
+    "19:00",
+    "19:00",
+    "19:00",
+    "19:00",
   ];
   List<String> daysOfWeekEndTimeType = [
     "*",
diff --git a/lib/screens/video_resolution.dart b/lib/screens/video_resolution.dart
index cb7db27..dc6eee9 100644
--- a/lib/screens/video_resolution.dart
+++ b/lib/screens/video_resolution.dart
@@ -2,6 +2,7 @@ import 'dart:ui';
 import 'package:doctorq/screens/appointments/book_screen/book_screen.dart';
 import 'package:flutter/material.dart';
 import 'package:doctorq/widgets/custom_button.dart';
+import 'package:doctorq/extensions.dart';
 
 class VideoResolution extends StatefulWidget {
   const VideoResolution({Key? key}) : super(key: key);
@@ -68,7 +69,9 @@ class _VideoResolutionState extends State<VideoResolution> {
                         children: [
                           CircleAvatar(
                             radius: 30,
-                            backgroundImage: const AssetImage('assets/images/11.png'),
+                            backgroundImage: context.selectedAppointment['patient']?['profile_image'] != null
+                                ? NetworkImage(context.selectedAppointment['patient']?['profile_image'])
+                                : AssetImage('assets/images/11.png') as ImageProvider,
                           ),
                           const SizedBox(width: 12),
                           // Информация о враче
@@ -76,19 +79,19 @@ class _VideoResolutionState extends State<VideoResolution> {
                             child: Column(
                               crossAxisAlignment: CrossAxisAlignment.start,
                               children: [
-                                const Text(
-                                  'Парфенова К.С.',
+                                Text(
+                                  '${context.selectedAppointment['patient']?['first_name'] ?? ''} ${context.selectedAppointment['patient']?['last_name'] ?? ''}',
                                   style: TextStyle(
                                     fontSize: 14,
                                     fontWeight: FontWeight.bold,
                                   ),
                                 ),
-                                const Text(
-                                  'Женщина, 71',
+                                /* Text(
+                                  '${context.selectedAppointment['patient']?['gender'] ?? 'Не указан'}, ${context.selectedAppointment['patient']?['age'] ?? 'Не указан'}',
                                   style: TextStyle(
                                     fontSize: 12,
                                   ),
-                                ),
+                                ), */
                                 const SizedBox(height: 4),
                                 const Text(
                                   '10:00 - 10:45',
diff --git a/lib/services/api_service.dart b/lib/services/api_service.dart
index 6992fe4..ed8200c 100755
--- a/lib/services/api_service.dart
+++ b/lib/services/api_service.dart
@@ -518,7 +518,7 @@ mutation UpdateUserProfile(\$input: UpdateUserProfileInput!) {
   };
   print(UPDATE_USER_PROFILE);
 
-  final uri = Uri.parse('https://onlinedoctor.su/graphql');
+  final uri = Uri.parse('https://admin.onlinedoctor.su/graphql');
 
   final request = http.MultipartRequest('post', uri);
 
@@ -577,10 +577,13 @@ Future<bool> updateProfileWithImage(BuildContext context, String imagePath,
   //lk
   SharedPreferences prefs = await SharedPreferences.getInstance();
   String? token = prefs.getString('authToken');
+  final currentUser = await Session.getCurrentUser();
+   String? userId = currentUser!.userId;
   var UPDATE_USER_PROFILE = '''
     mutation {
       updateUserProfile(
         input: {
+          user_id:  "$userId",
           first_name: "$firstName",
           email: "$email",
           profile_image: null
@@ -603,7 +606,7 @@ Future<bool> updateProfileWithImage(BuildContext context, String imagePath,
     }
   ''';
   print(UPDATE_USER_PROFILE);
-  final uri = Uri.parse('https://onlinedoctor.su/graphql');
+  final uri = Uri.parse('https://admin.onlinedoctor.su/graphql');
 
   final request = http.MultipartRequest('post', uri);
 
@@ -686,7 +689,7 @@ Future<bool> updateProfileWithDocument(BuildContext context, String imagePath,
     }
   ''';
   print(UPDATE_USER_PROFILE);
-  final uri = Uri.parse('https://onlinedoctor.su/graphql');
+  final uri = Uri.parse('https://admin.onlinedoctor.su/graphql');
 
   final request = http.MultipartRequest('post', uri);
 
@@ -736,3 +739,97 @@ Future<bool> updateProfileWithDocument(BuildContext context, String imagePath,
     return false;
   }
 }
+
+Future<bool> createDoctorReview({required String patientId, required int rating, required String review}) async {
+  printLog('Creating doctor review for patient: $patientId');
+  
+  String createDoctorReviewMutation = '''
+    mutation CreateDoctorReview(\$input: CreateDoctorReviewInput!) {
+      createDoctorReview(input: \$input) {
+        review {
+          id
+          rating
+          review
+          created_at
+        }
+        status
+      }
+    }
+  ''';
+
+  final variables = {
+    'input': {
+      'patient_id': patientId,
+      'rating': rating,
+      'review': review,
+    }
+  };
+
+  final QueryOptions options = QueryOptions(
+    document: gql(createDoctorReviewMutation),
+    variables: variables,
+  );
+
+  GraphQLClient graphqlClient = await graphqlAPI.authClient();
+  debugPrintTransactionStart('mutation createDoctorReview');
+  final QueryResult result = await graphqlClient.query(options);
+  debugPrintTransactionEnd('mutation createDoctorReview');
+
+  if (result.hasException) {
+    printLog(result.exception.toString(), name: 'mutation createDoctorReview');
+    return false;
+  }
+
+  printLog('Doctor review created successfully: ${result.data}');
+  return true;
+}
+
+Future<bool> getPatientsForDoctor({required String doctorId}) async {
+  printLog('Getting patients for doctor: $doctorId');
+  
+  // First get appointments for the doctor
+  bool success = await getAppointmentsD(doctorId: doctorId);
+  
+  if (!success) {
+    return false;
+  }
+  
+  // Get the appointments store to extract patients
+  AppointmentsStore storeAppointmentsStore = getIt.get<AppointmentsStore>();
+  List<dynamic> appointments = storeAppointmentsStore.appointmentsDataList;
+  
+  // Extract unique patients from appointments
+  Set<String> uniquePatientIds = {};
+  List<Map<String, dynamic>> patients = [];
+  
+  for (var appointment in appointments) {
+    if (appointment['patient'] != null && 
+        appointment['patient']['patientUser'] != null) {
+      var patientUser = appointment['patient']['patientUser'];
+      String patientId = patientUser['id'].toString();
+      
+      // Check if we've already added this patient
+      if (!uniquePatientIds.contains(patientId)) {
+        uniquePatientIds.add(patientId);
+        patients.add({
+          'id': patientId,
+          'full_name': patientUser['full_name'] ?? 'Неизвестный пациент',
+          'first_name': patientUser['first_name'] ?? '',
+          'profile_image': patientUser['profile_image'] ?? '',
+        });
+      }
+    }
+  }
+  
+  // Store patients in a dedicated store (we'll need to create this)
+  // For now, we'll store them in the doctors store temporarily
+  DoctorsStore storeDoctorsStore = getIt.get<DoctorsStore>();
+  storeDoctorsStore.clearDoctorsData();
+  
+  for (var patient in patients) {
+    storeDoctorsStore.addDoctorToDoctorsData(patient);
+  }
+  
+  printLog('Found ${patients.length} unique patients for doctor $doctorId');
+  return true;
+}
diff --git a/lib/services/auth_service.dart b/lib/services/auth_service.dart
index 1d462bb..cbc4b00 100755
--- a/lib/services/auth_service.dart
+++ b/lib/services/auth_service.dart
@@ -38,6 +38,7 @@ Future<bool> regUser(BuildContext context, String email, String password,
         password: "$password"
         password_confirmation: "$password"
         role: "$role"
+        snils: "$unused"
         verification_url: {
           url: "https://onlinedoctor.su/api/verify-email?id=__ID__&token=__HASH__&expires=__EXPIRES__&signature=__SIGNATURE__"
         }
@@ -166,6 +167,9 @@ Future<bool> authUser(
                         photo: profile_image
                         patient_id
                         doctor_id
+                        snils
+                        phone: contact
+                        birth_date: dob
                     }
 
                 }
diff --git a/lib/stores/appointments_store.g.dart b/lib/stores/appointments_store.g.dart
old mode 100755
new mode 100644
diff --git a/lib/stores/doctor_sessions_store.g.dart b/lib/stores/doctor_sessions_store.g.dart
old mode 100755
new mode 100644
diff --git a/lib/stores/doctors_store.g.dart b/lib/stores/doctors_store.g.dart
old mode 100755
new mode 100644
diff --git a/lib/stores/init_stores.dart b/lib/stores/init_stores.dart
index 55e0e9e..fa6d7ba 100755
--- a/lib/stores/init_stores.dart
+++ b/lib/stores/init_stores.dart
@@ -1,6 +1,7 @@
 import 'package:doctorq/stores/appointments_store.dart';
 import 'package:doctorq/stores/doctor_sessions_store.dart';
 import 'package:doctorq/stores/doctors_store.dart';
+import 'package:doctorq/stores/patients_store.dart';
 import 'package:doctorq/stores/user_store.dart';
 import 'package:doctorq/stores/specs_store.dart';
 import 'package:get_it/get_it.dart';
@@ -14,4 +15,5 @@ void initStores() {
   getIt.registerLazySingleton<AppointmentsStore>(() => AppointmentsStore());
   getIt.registerLazySingleton<DoctorSessionsStore>(() => DoctorSessionsStore());
   getIt.registerLazySingleton<SpecsStore>(() => SpecsStore());
+  getIt.registerLazySingleton<PatientsStore>(() => PatientsStore());
 }
diff --git a/lib/stores/specs_store.g.dart b/lib/stores/specs_store.g.dart
old mode 100755
new mode 100644
diff --git a/lib/stores/user_store.g.dart b/lib/stores/user_store.g.dart
old mode 100755
new mode 100644
