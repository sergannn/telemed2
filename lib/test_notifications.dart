import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;

class NotificationTester {
  static const String baseUrl = 'https://admin.onlinedoctor.su';
  static const String graphqlEndpoint = '$baseUrl/graphql';

  // –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static Future<void> createTestAppointmentAndCheckNotifications() async {
    print('üß™ === –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===\n');

    try {
      // 1. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—Ç–æ—Ä–æ–≤
      print('1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—Ç–æ—Ä–æ–≤...');
      final doctors = await _getDoctors();
      if (doctors.isEmpty) {
        print('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—Ç–æ—Ä–æ–≤');
        return;
      }

      final doctor = doctors.first;
      final doctorId = doctor['doctor_id'].toString();
      print('‚úÖ –í—ã–±—Ä–∞–Ω –¥–æ–∫—Ç–æ—Ä: ${doctor['doctorUser']?['username']} (ID: $doctorId)');

      // 2. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
      print('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤...');
      final patients = await _getPatients();
      if (patients.isEmpty) {
        print('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤');
        return;
      }

      final patient = patients.first;
      final patientId = patient['id'].toString();
      print('‚úÖ –í—ã–±—Ä–∞–Ω –ø–∞—Ü–∏–µ–Ω—Ç: ${patient['full_name']} (ID: $patientId)');

      // 3. –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–æ–∫—Ç–æ—Ä–∞
      print('\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–æ–∫—Ç–æ—Ä–∞...');
      final currentAppointments = await _getAppointmentsForDoctor(doctorId);
      print('üìÖ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${currentAppointments.length}');

      // 4. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      print('\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏...');
      final newAppointment = await _createTestAppointment(doctorId, patientId);
      if (newAppointment == null) {
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å');
        return;
      }

      print('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å:');
      print('   ID: ${newAppointment['id']}');
      print('   –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: ${newAppointment['appointment_unique_id']}');
      print('   –î–∞—Ç–∞: ${newAppointment['date']}');
      print('   –í—Ä–µ–º—è: ${newAppointment['from_time']} ${newAppointment['from_time_type']}');

      // 5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
      print('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è...');
      final updatedAppointments = await _getAppointmentsForDoctor(doctorId);
      print('üìÖ –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${updatedAppointments.length}');

      // 6. –ù–∞–π—Ç–∏ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      final newAppointmentId = newAppointment['id'].toString();
      final foundNewAppointment = updatedAppointments.firstWhere(
        (apt) => apt['id'].toString() == newAppointmentId,
        orElse: () => null,
      );

      if (foundNewAppointment != null) {
        print('‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ appointments!');
        print('   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ.');
      } else {
        print('‚ùå –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ appointments');
      }

      // 7. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      print('\nüì± === –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===');
      print('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–∫—Ç–æ—Ä–∞');
      print('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω /test_notifications');
      print('3. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å Polling"');
      print('4. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã');
      print('5. –î–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏');
      print('\n–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –µ—â–µ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:');
      print('   dart test_notifications.dart --create-more');

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞: $e');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—Ç–æ—Ä–æ–≤
  static Future<List<dynamic>> _getDoctors() async {
    final query = '''
      query doctors {
        doctors(first: 5) {
          data {
            doctor_id: id
            doctorUser {
              user_id: id 
              username: full_name
              first_name
              last_name
            }
          }
        }
      }
    ''';

    final response = await _makeGraphQLRequest(query);
    if (response != null && response['data']?['doctors']?['data'] != null) {
      return response['data']['doctors']['data'] as List<dynamic>;
    }
    return [];
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
  static Future<List<dynamic>> _getPatients() async {
    final query = '''
      query patients {
        patients(first: 5) {
          data {
            id
            patientUser {
              full_name
              first_name
            }
          }
        }
      }
    ''';

    final response = await _makeGraphQLRequest(query);
    if (response != null && response['data']?['patients']?['data'] != null) {
      return response['data']['patients']['data'] as List<dynamic>;
    }
    return [];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–∫—Ç–æ—Ä–∞
  static Future<List<dynamic>> _getAppointmentsForDoctor(String doctorId) async {
    final query = '''
      query appointments {
        appointmentsbydoctor(doctor_id: "$doctorId") {
          id
          date
          appointment_unique_id
          patient {
            patientUser {
              full_name
            }
          }
          status
          from_time
          from_time_type
          to_time
          to_time_type
        }
      }
    ''';

    final response = await _makeGraphQLRequest(query);
    if (response != null && response['data']?['appointmentsbydoctor'] != null) {
      return response['data']['appointmentsbydoctor'] as List<dynamic>;
    }
    return [];
  }

  // –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
  static Future<Map<String, dynamic>?> _createTestAppointment(String doctorId, String patientId) async {
    final tomorrow = DateTime.now().add(Duration(days: 1));
    final dateStr = '${tomorrow.year}-${tomorrow.month.toString().padLeft(2, '0')}-${tomorrow.day.toString().padLeft(2, '0')}';
    
    final mutation = '''
      mutation {
        createAppointment(
          doctor_id: "$doctorId"
          patient_id: "$patientId"
          date: "$dateStr"
          from_time: "16:00"
          from_time_type: "PM"
          to_time: "17:00"
          to_time_type: "PM"
          status: "1"
          description: "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - ${DateTime.now()}"
          service_id: "1"
          payment_type: "2"
          payable_amount: "2000.00"
        ) {
          id
          appointment_unique_id
          date
          from_time
          from_time_type
          to_time
          to_time_type
          status
        }
      }
    ''';

    final response = await _makeGraphQLRequest(mutation);
    if (response != null && response['data']?['createAppointment'] != null) {
      return response['data']['createAppointment'] as Map<String, dynamic>;
    }
    return null;
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å GraphQL –∑–∞–ø—Ä–æ—Å
  static Future<Map<String, dynamic>?> _makeGraphQLRequest(String query) async {
    try {
      final response = await http.post(
        Uri.parse(graphqlEndpoint),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: jsonEncode({'query': query}),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        
        if (data['errors'] != null) {
          print('‚ùå GraphQL –æ—à–∏–±–∫–∏:');
          for (var error in data['errors']) {
            print('  - ${error['message']}');
          }
          return null;
        }
        
        return data;
      } else {
        print('‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.statusCode}');
        print('–û—Ç–≤–µ—Ç: ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: $e');
      return null;
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
  static Future<void> createMultipleTestAppointments() async {
    print('üß™ === –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π ===\n');

    try {
      final doctors = await _getDoctors();
      final patients = await _getPatients();
      
      if (doctors.isEmpty || patients.isEmpty) {
        print('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—Ç–æ—Ä–æ–≤ –∏–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤');
        return;
      }

      final doctorId = doctors.first['doctor_id'].toString();
      final patientId = patients.first['id'].toString();

      print('–°–æ–∑–¥–∞–Ω–∏–µ 3 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π...\n');

      for (int i = 1; i <= 3; i++) {
        print('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ #$i...');
        
        final tomorrow = DateTime.now().add(Duration(days: i));
        final dateStr = '${tomorrow.year}-${tomorrow.month.toString().padLeft(2, '0')}-${tomorrow.day.toString().padLeft(2, '0')}';
        
        final mutation = '''
          mutation {
            createAppointment(
              doctor_id: "$doctorId"
              patient_id: "$patientId"
              date: "$dateStr"
              from_time: "${14 + i}:00"
              from_time_type: "PM"
              to_time: "${15 + i}:00"
              to_time_type: "PM"
              status: "1"
              description: "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å #$i - ${DateTime.now()}"
              service_id: "1"
              payment_type: "2"
              payable_amount: "${(1000 + i * 500).toStringAsFixed(2)}"
            ) {
              id
              appointment_unique_id
              date
              from_time
              to_time
            }
          }
        ''';

        final response = await _makeGraphQLRequest(mutation);
        if (response != null && response['data']?['createAppointment'] != null) {
          final appointment = response['data']['createAppointment'];
          print('‚úÖ –ó–∞–ø–∏—Å—å #$i —Å–æ–∑–¥–∞–Ω–∞: ID ${appointment['id']}, –¥–∞—Ç–∞ ${appointment['date']}');
        } else {
          print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å #$i');
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await Future.delayed(Duration(seconds: 1));
      }

      print('\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
      print('–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞: $e');
    }
  }
}

void main(List<String> args) async {
  print('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n');
  
  if (args.contains('--create-more')) {
    await NotificationTester.createMultipleTestAppointments();
  } else {
    await NotificationTester.createTestAppointmentAndCheckNotifications();
  }
}


