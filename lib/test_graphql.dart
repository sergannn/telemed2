import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;

class GraphQLTester {
  static const String baseUrl = 'https://admin.onlinedoctor.su';
  static const String graphqlEndpoint = '$baseUrl/graphql';

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è appointments –¥–ª—è –¥–æ–∫—Ç–æ—Ä–∞
  static Future<void> testGetAppointments(String doctorId) async {
    print('=== –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è appointments –¥–ª—è –¥–æ–∫—Ç–æ—Ä–∞ $doctorId ===\n');

    final query = '''
      query appointments {
        appointmentsbydoctor(doctor_id: "$doctorId") {
          id
          date
          appointment_unique_id
          patient {
            patientUser {
              id
              full_name 
              first_name
              profile_image
            }
          }
          doctor {
            doctor_id: id
            specializations {
              name
            }
            doctorUser {
              user_id: id 
              username: full_name
              first_name
              last_name
              photo: profile_image
            }
          }
          description
          status
          from_time
          from_time_type
          to_time
          to_time_type
          room_data
        }
      }
    ''';

    try {
      final response = await http.post(
        Uri.parse(graphqlEndpoint),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: jsonEncode({
          'query': query,
        }),
      );

      print('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        
        if (data['errors'] != null) {
          print('‚ùå GraphQL –æ—à–∏–±–∫–∏:');
          for (var error in data['errors']) {
            print('  - ${error['message']}');
          }
          return;
        }

        final appointments = data['data']['appointmentsbydoctor'] as List;
        print('‚úÖ –ù–∞–π–¥–µ–Ω–æ ${appointments.length} –∑–∞–ø–∏—Å–µ–π\n');

        for (var appointment in appointments) {
          print('üìÖ –ó–∞–ø–∏—Å—å #${appointment['id']}');
          print('   –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: ${appointment['appointment_unique_id']}');
          print('   –î–∞—Ç–∞: ${appointment['date']}');
          print('   –í—Ä–µ–º—è: ${appointment['from_time']} ${appointment['from_time_type']} - ${appointment['to_time']} ${appointment['to_time_type']}');
          print('   –°—Ç–∞—Ç—É—Å: ${appointment['status']}');
          print('   –ü–∞—Ü–∏–µ–Ω—Ç: ${appointment['patient']?['patientUser']?['full_name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}');
          print('   –û–ø–∏—Å–∞–Ω–∏–µ: ${appointment['description'] ?? '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}');
          print('');
        }
      } else {
        print('‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.statusCode}');
        print('–û—Ç–≤–µ—Ç: ${response.body}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: $e');
    }
  }

  // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ GraphQL
  static Future<void> testCreateAppointment(String doctorId, String patientId) async {
    print('=== –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ GraphQL ===\n');

    final tomorrow = DateTime.now().add(Duration(days: 1));
    final dateStr = '${tomorrow.year}-${tomorrow.month.toString().padLeft(2, '0')}-${tomorrow.day.toString().padLeft(2, '0')}';
    
    final mutation = '''
      mutation {
        createAppointment(
          doctor_id: "$doctorId"
          patient_id: "$patientId"
          date: "$dateStr"
          from_time: "15:00"
          from_time_type: "PM"
          to_time: "16:00"
          to_time_type: "PM"
          status: "1"
          description: "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ GraphQL - ${DateTime.now()}"
          service_id: "1"
          payment_type: "2"
          payable_amount: "1500.00"
        ) {
          id
          appointment_unique_id
          date
          from_time
          to_time
          status
        }
      }
    ''';

    try {
      final response = await http.post(
        Uri.parse(graphqlEndpoint),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: jsonEncode({
          'query': mutation,
        }),
      );

      print('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}');
      print('–û—Ç–≤–µ—Ç: ${response.body}\n');
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        
        if (data['errors'] != null) {
          print('‚ùå GraphQL –æ—à–∏–±–∫–∏:');
          for (var error in data['errors']) {
            print('  - ${error['message']}');
          }
        } else if (data['data']?['createAppointment'] != null) {
          final appointment = data['data']['createAppointment'];
          print('‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
          print('   ID: ${appointment['id']}');
          print('   –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: ${appointment['appointment_unique_id']}');
          print('   –î–∞—Ç–∞: ${appointment['date']}');
          print('   –í—Ä–µ–º—è: ${appointment['from_time']} - ${appointment['to_time']}');
          print('   –°—Ç–∞—Ç—É—Å: ${appointment['status']}');
        }
      } else {
        print('‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: $e');
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—Ç–æ—Ä–æ–≤
  static Future<void> testGetDoctors() async {
    print('=== –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—Ç–æ—Ä–æ–≤ ===\n');

    final query = '''
      query doctors {
        doctors(first: 5) {
          data {
            doctor_id: id
            specializations {
              name
            }
            doctorUser {
              user_id: id 
              username: full_name
              first_name
              last_name
              photo: profile_image
            }
          }
        }
      }
    ''';

    try {
      final response = await http.post(
        Uri.parse(graphqlEndpoint),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: jsonEncode({
          'query': query,
        }),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        
        if (data['errors'] != null) {
          print('‚ùå GraphQL –æ—à–∏–±–∫–∏:');
          for (var error in data['errors']) {
            print('  - ${error['message']}');
          }
          return;
        }

        final doctors = data['data']['doctors']['data'] as List;
        print('‚úÖ –ù–∞–π–¥–µ–Ω–æ ${doctors.length} –¥–æ–∫—Ç–æ—Ä–æ–≤\n');

        for (var doctor in doctors) {
          print('üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä #${doctor['doctor_id']}');
          print('   –ò–º—è: ${doctor['doctorUser']?['username'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}');
          print('   –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${doctor['specializations']?[0]?['name'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}');
          print('');
        }
      } else {
        print('‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: $e');
    }
  }
}

void main() async {
  print('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ GraphQL API\n');
  
  // 1. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—Ç–æ—Ä–æ–≤
  await GraphQLTester.testGetDoctors();
  
  // 2. –¢–µ—Å—Ç —Å –ø–µ—Ä–≤—ã–º –¥–æ–∫—Ç–æ—Ä–æ–º (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID)
  const testDoctorId = '1'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –¥–æ–∫—Ç–æ—Ä–∞
  await GraphQLTester.testGetAppointments(testDoctorId);
  
  // 3. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
  const testPatientId = '1'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–∞—Ü–∏–µ–Ω—Ç–∞
  await GraphQLTester.testCreateAppointment(testDoctorId, testPatientId);
  
  // 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å appointments –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
  print('\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ ===');
  await GraphQLTester.testGetAppointments(testDoctorId);
  
  print('\n‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}


